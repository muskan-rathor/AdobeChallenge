{
  "filename": "mypdf.pdf",
  "metadata": {
    "title": "Operating Systems",
    "author": "Deepak",
    "creator": "Microsoft® Word 2019",
    "subject": "",
    "keywords": "",
    "pageCount": 46,
    "creationDate": "D:20220621142232+05'30'",
    "modificationDate": "D:20240412173230+05'30'"
  },
  "structure": {
    "sections": [
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 1,
        "bbox": [
          395.7099914550781,
          19.5,
          540.6099853515625,
          37.5
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "1 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 1,
        "bbox": [
          92.66400146484375,
          799.6503295898438,
          494.83502197265625,
          815.192626953125
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "heading",
        "content": "COURSE NAME: OPERATING SYSTEMS",
        "page": 1,
        "bbox": [
          57.0,
          55.56789779663086,
          341.5633544921875,
          74.9009780883789
        ],
        "font": {
          "name": "ComicSansMS-Bold",
          "size": 14.039999961853027,
          "flags": 16,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "heading",
        "content": "COURSE CODE: 18CS43",
        "page": 1,
        "bbox": [
          57.0,
          84.62789916992188,
          230.183349609375,
          103.96097564697266
        ],
        "font": {
          "name": "ComicSansMS-Bold",
          "size": 14.039999961853027,
          "flags": 16,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "heading",
        "content": "SEMESTER: 4",
        "page": 1,
        "bbox": [
          57.0,
          113.66787719726562,
          160.55335998535156,
          133.00094604492188
        ],
        "font": {
          "name": "ComicSansMS-Bold",
          "size": 14.039999961853027,
          "flags": 16,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "heading",
        "content": "MODULE: 1",
        "page": 1,
        "bbox": [
          57.0,
          142.70791625976562,
          144.2333526611328,
          162.04098510742188
        ],
        "font": {
          "name": "ComicSansMS-Bold",
          "size": 14.039999961853027,
          "flags": 16,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "heading",
        "content": "NUMBER OF HOURS: 08",
        "page": 1,
        "bbox": [
          57.0,
          171.74789428710938,
          235.70335388183594,
          191.08096313476562
        ],
        "font": {
          "name": "ComicSansMS-Bold",
          "size": 14.039999961853027,
          "flags": 16,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "heading",
        "content": "CONTENTS:",
        "page": 1,
        "bbox": [
          57.0,
          200.78793334960938,
          149.75335693359375,
          220.12100219726562
        ],
        "font": {
          "name": "ComicSansMS-Bold",
          "size": 14.039999961853027,
          "flags": 16,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "❖ Introduction to operating systems:",
        "page": 1,
        "bbox": [
          75.02400207519531,
          229.79595947265625,
          303.9980163574219,
          246.31996154785156
        ],
        "font": {
          "name": "Wingdings-Regular",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• What operating systems do?",
        "page": 1,
        "bbox": [
          111.0199966430664,
          247.91595458984375,
          292.47802734375,
          264.43994140625
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Computer System organization",
        "page": 1,
        "bbox": [
          111.0199966430664,
          265.94598388671875,
          303.7580261230469,
          282.469970703125
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Computer System architecture • Operating System structure • Operating System operations",
        "page": 1,
        "bbox": [
          111.0199966430664,
          284.06597900390625,
          306.27801513671875,
          336.5899658203125
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Process management • Memory management",
        "page": 1,
        "bbox": [
          111.0199966430664,
          338.18597412109375,
          249.75799560546875,
          372.7099609375
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Storage management • Protection and Security • Distributed system",
        "page": 1,
        "bbox": [
          111.0199966430664,
          374.30596923828125,
          265.9580078125,
          426.8299560546875
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Special-purpose systems • Computing environments. ❖ Operating-System Structures:",
        "page": 1,
        "bbox": [
          75.02400207519531,
          428.44598388671875,
          276.03802490234375,
          480.969970703125
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Operating System Services; • User - Operating System interface",
        "page": 1,
        "bbox": [
          111.0199966430664,
          482.56597900390625,
          329.8180236816406,
          517.0899658203125
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• System calls • Types of system calls • System programs",
        "page": 1,
        "bbox": [
          111.0199966430664,
          518.6859741210938,
          253.2379913330078,
          571.2099609375
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Operating system design and implementation • Operating System structure",
        "page": 1,
        "bbox": [
          111.0199966430664,
          572.8059692382812,
          382.13800048828125,
          607.3299560546875
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Virtual machines • Operating System generation • System boot.",
        "page": 1,
        "bbox": [
          111.0199966430664,
          608.9559936523438,
          297.15802001953125,
          661.47998046875
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "❖ Process Management:",
        "page": 1,
        "bbox": [
          75.02400207519531,
          663.0759887695312,
          228.21798706054688,
          679.5999755859375
        ],
        "font": {
          "name": "Wingdings-Regular",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Process concept",
        "page": 1,
        "bbox": [
          111.0199966430664,
          681.0759887695312,
          222.5179901123047,
          697.5999755859375
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Process scheduling • Operations on processes • Inter process communication",
        "page": 1,
        "bbox": [
          111.0199966430664,
          699.1959838867188,
          298.1180114746094,
          751.7160034179688
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 2,
        "bbox": [
          395.7099914550781,
          19.5,
          540.6099853515625,
          37.5
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "2 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 2,
        "bbox": [
          92.66400146484375,
          799.6503295898438,
          494.83502197265625,
          815.192626953125
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "heading",
        "content": "MODULE 1",
        "page": 2,
        "bbox": [
          236.69000244140625,
          56.51359558105469,
          357.7599792480469,
          80.82331848144531
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 21.959999084472656,
          "flags": 20,
          "color": 0
        },
        "level": 1
      },
      {
        "type": "heading",
        "content": "INTRODUCTION TO OPERATING SYSTEM What is an Operating System?",
        "page": 2,
        "bbox": [
          57.0,
          102.67960357666016,
          471.489990234375,
          161.81260681152344
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 15.960000038146973,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "An operating system is system software that acts as an intermediary between a user of a computer and the computer hardware . It is software that manages the computer hardware and allows the user to execute programs in a convenient and efficient manner. Operating system goals:",
        "page": 2,
        "bbox": [
          57.0,
          172.3279571533203,
          526.4180297851562,
          240.8119659423828
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldItalicMT",
          "size": 12.0,
          "flags": 22,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Make the computer system convenient to use. It hides the difficulty in managing the",
        "page": 2,
        "bbox": [
          75.02400207519531,
          240.91998291015625,
          526.6599731445312,
          255.5719757080078
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "hardware. • Use the computer hardware in an efficient manner • Provide and environment in which user can easily interface with computer. • It is a resource allocator",
        "page": 2,
        "bbox": [
          75.02400207519531,
          256.1180114746094,
          455.9800109863281,
          313.0820007324219
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "Computer System Structure (Components of Computer System)",
        "page": 2,
        "bbox": [
          57.0,
          314.4380187988281,
          444.010009765625,
          344.1226501464844
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "Computer system mainly consists of four components-",
        "page": 2,
        "bbox": [
          57.0,
          344.43798828125,
          322.75,
          371.4020080566406
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Hardware – provides basic computing resources CPU, memory, I/O devices • Operating system - Controls and coordinates use of hardware among various applications and",
        "page": 2,
        "bbox": [
          75.02400207519531,
          381.22998046875,
          555.3580932617188,
          410.6419982910156
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "users • Application programs – define the ways in which the system resources are used to solve",
        "page": 2,
        "bbox": [
          75.02400207519531,
          411.99798583984375,
          526.2979736328125,
          440.1619873046875
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "the computing problems of the users, Word processors, compilers, web browsers, database systems, video games • Users - People, machines, other computers",
        "page": 2,
        "bbox": [
          57.0,
          440.697998046875,
          526.3820190429688,
          495.17462158203125
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=964, height=449]",
        "page": 2,
        "bbox": [
          136.5,
          502.449951171875,
          476.3999938964844,
          709.449951171875
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 3,
        "bbox": [
          395.7099914550781,
          19.5,
          540.6099853515625,
          37.5
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "3 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 3,
        "bbox": [
          92.66400146484375,
          799.6503295898438,
          494.83502197265625,
          815.192626953125
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "heading",
        "content": "List out the User Views and System views of OS Operating System can be viewed from two viewpoints– User views & System views User Views: - T he user’s view of the operating system depends on the type of user.",
        "page": 3,
        "bbox": [
          57.0,
          56.130313873291016,
          465.4599914550781,
          126.81197357177734
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "• If the user is using standalone system, then OS is designed for ease of use and high",
        "page": 3,
        "bbox": [
          75.02400207519531,
          127.32795715332031,
          526.5399780273438,
          155.25196838378906
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "performances. Here resource utilization is not given importance.",
        "page": 3,
        "bbox": [
          57.0,
          155.76795959472656,
          404.5899963378906,
          178.3966064453125
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• If the users are at different terminals connected to a mainframe or minicomputers, by sharing",
        "page": 3,
        "bbox": [
          75.02400207519531,
          182.9599609375,
          555.2301025390625,
          197.61195373535156
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "information and resources, then the OS is designed to maximize resource utilization. OS is designed such that the CPU time, memory and i/o are used efficiently and no single user takes more than the resource allotted to them.",
        "page": 3,
        "bbox": [
          57.0,
          198.1280059814453,
          555.4360961914062,
          254.94891357421875
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• If the users are in workstations , connected to networks and servers, then the user have a",
        "page": 3,
        "bbox": [
          75.02400207519531,
          254.8699951171875,
          526.2979736328125,
          269.5220031738281
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "system unit of their own and shares resources and files with other systems. Here the OS is designed for both ease of use and resource availability (files). • Other systems like embedded systems used in home device (like washing m/c) &",
        "page": 3,
        "bbox": [
          75.02400207519531,
          270.0379943847656,
          526.4259643554688,
          325.5619812011719
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "automobiles do not have any user interaction. There are some LEDs to show the status of its work",
        "page": 3,
        "bbox": [
          57.0,
          326.0780029296875,
          526.1280517578125,
          364.4976501464844
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Users of hand-held systems, expects the OS to be designed for ease of use and performance",
        "page": 3,
        "bbox": [
          75.02400207519531,
          364.42999267578125,
          555.4600219726562,
          379.0820007324219
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "per amount of battery life System Views : - Operating system can be viewed as a resource allocator and control program .",
        "page": 3,
        "bbox": [
          57.0,
          379.7179870605469,
          525.0999755859375,
          434.4020080566406
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Resource allocator – The OS acts as a manager of hardware and software resources.",
        "page": 3,
        "bbox": [
          75.02400207519531,
          434.40997314453125,
          526.25,
          449.0619812011719
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "CPU time, memory space, file-storage space, I/O devices, shared files etc. are the different resources required during execution of a program. There can be conflicting request for these resources by different programs running in same system. The OS assigns the resources to the requesting program depending on the priority. • Control Program – The OS is a control program and manage the execution of user",
        "page": 3,
        "bbox": [
          75.02400207519531,
          449.5780029296875,
          526.3939208984375,
          532.7019653320312
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "program to prevent errors and improper use of the computer. Computer System Organization",
        "page": 3,
        "bbox": [
          57.0,
          533.2179565429688,
          387.42999267578125,
          604.0626220703125
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "Computer - system operation One or more CPUs, device controllers connect through common bus providing access to shared memory. Each device controller is in-charge of a specific type of device. To ensure orderly access to the shared memory, a memory controller is provided whose function is to synchronize access to the memory. The CPU and other devices execute concurrently competing for memory cycles. Concurrent execution of CPUs and devices competing for memory cycles",
        "page": 3,
        "bbox": [
          72.02400207519531,
          616.7679443359375,
          526.6599731445312,
          712.8519897460938
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldItalicMT",
          "size": 12.0,
          "flags": 22,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 4,
        "bbox": [
          395.7099914550781,
          19.5,
          540.6099853515625,
          37.5
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "4 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 4,
        "bbox": [
          92.66400146484375,
          799.6503295898438,
          494.83502197265625,
          815.192626953125
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "• When system is switched on, ‘ Bootstrap’ program is executed. It is the initial program to",
        "page": 4,
        "bbox": [
          74.42400360107422,
          231.91998291015625,
          526.5819702148438,
          246.5719757080078
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "run in the system. This program is stored in read-only memory (ROM) or in electrically erasable programmable read-only memory (EEPROM). • It initializes the CPU registers, memory, device controllers and other initial setups. The",
        "page": 4,
        "bbox": [
          74.42400360107422,
          249.0080108642578,
          526.5459594726562,
          295.0820007324219
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "program also locates and loads, the OS kernel to the memory. Then the OS starts with the first process to be executed (ie. ‘init’ process) and then wait for the interrupt from the user.",
        "page": 4,
        "bbox": [
          92.42400360107422,
          297.5179748535156,
          526.3880004882812,
          342.60198974609375
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Switch on ‘Bootstrap’ program • Initializes the registers, memory and I/O devices • Locates & loads kernel into memory • Starts with ‘init’ process • Waits for interrupt from user. Interrupt handling –",
        "page": 4,
        "bbox": [
          72.02400207519531,
          354.99798583984375,
          400.8699951171875,
          468.3819885253906
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• The occurrence of an event is usually signaled by an interrupt. The interrupt can either be from",
        "page": 4,
        "bbox": [
          84.02400207519531,
          468.3699951171875,
          555.0360107421875,
          483.0220031738281
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "the hardware or the software. Hardware may trigger an interrupt at any time by sending a signal to the CPU. Software triggers an interrupt by executing a special operation called a system call (also called a monitor call). • When the CPU is interrupted, it stops what it is doing and immediately transfers execution to a",
        "page": 4,
        "bbox": [
          84.02400207519531,
          483.5379943847656,
          555.31005859375,
          552.8619995117188
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "fixed location. The fixed location (Interrupt Vector Table) contains the starting address where the service routine for the interrupt is located. After the execution of interrupt service routine, the CPU resumes the interrupted computation. • Interrupts are an important part of computer architecture. Each computer design has its own",
        "page": 4,
        "bbox": [
          84.02400207519531,
          553.4979248046875,
          555.1199340820312,
          622.7319946289062
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "interrupt mechanism, but several functions are common. The interrupt must transfer control to the appropriate interrupt service routine",
        "page": 4,
        "bbox": [
          93.02400207519531,
          623.3679809570312,
          555.0960083007812,
          650.4519653320312
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=718, height=276]",
        "page": 4,
        "bbox": [
          142.9499969482422,
          650.3609619140625,
          466.4000244140625,
          774.6909790039062
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=498, height=259]",
        "page": 4,
        "bbox": [
          167.39999389648438,
          58.050018310546875,
          465.8999938964844,
          213.45001220703125
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 5,
        "bbox": [
          395.7099914550781,
          19.5,
          540.6099853515625,
          37.5
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "5 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 5,
        "bbox": [
          92.66400146484375,
          799.6503295898438,
          494.83502197265625,
          815.192626953125
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "Storage Structure",
        "page": 5,
        "bbox": [
          57.0,
          56.02796936035156,
          151.6999969482422,
          83.1119613647461
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 12.0,
          "flags": 20,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Computer programs must be in main memory ( RAM) to be executed. Main memory is",
        "page": 5,
        "bbox": [
          75.02400207519531,
          83.1199951171875,
          526.666015625,
          97.7719955444336
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "the large memory that the processor can access directly. It commonly is implemented in a semiconductor technology called dynamic random-access memory (DRAM). Computers provide Read Only Memory (ROM), whose data cannot be changed. • All forms of memory provide an array of memory words. Each word has its own address.",
        "page": 5,
        "bbox": [
          75.02400207519531,
          98.28797912597656,
          526.677978515625,
          153.8119659423828
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Interaction is achieved through a sequence of load or store instructions to specific memory addresses. • A typical instruction-execution cycle, as executed on a system with a Von Neumann",
        "page": 5,
        "bbox": [
          75.02400207519531,
          154.3279571533203,
          526.7440185546875,
          196.0519561767578
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "architecture, first fetches an instruction from memory and stores that instruction in the instruction register. The instruction is then decoded and may cause operands to be fetched from memory and stored in some internal register. After the instruction on the operands has been executed, the result may be stored back in memory. • Ideally, we want the programs and data to reside in main memory permanently. This",
        "page": 5,
        "bbox": [
          75.02400207519531,
          196.56800842285156,
          526.5240478515625,
          265.9219665527344
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "arrangement usually is not possible for the following two reasons:",
        "page": 5,
        "bbox": [
          93.02400207519531,
          266.4380187988281,
          412.989990234375,
          293.5220031738281
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "1.Main memory is usually too small to store all needed programs and data permanently. 2. Main memory is a volatile storage device that loses its contents when power is",
        "page": 5,
        "bbox": [
          111.0199966430664,
          294.0379943847656,
          535.0599975585938,
          321.1219787597656
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "turned off.",
        "page": 5,
        "bbox": [
          57.0,
          321.63800048828125,
          182.66000366210938,
          348.72198486328125
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Thus, most computer systems provide secondary storage as an extension of main",
        "page": 5,
        "bbox": [
          75.02400207519531,
          348.7099914550781,
          526.677978515625,
          363.36199951171875
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "memory. The main requirement for secondary storage is that it will be able to hold large quantities of data permanently.",
        "page": 5,
        "bbox": [
          57.0,
          363.87799072265625,
          526.4400024414062,
          404.7619934082031
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• The most common secondary-storage device is a magnetic disk, which provides storage",
        "page": 5,
        "bbox": [
          75.02400207519531,
          404.75,
          526.4860229492188,
          419.4020080566406
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "for both programs and data. Most programs are stored on a disk until they are loaded into memory. Many programs then use the disk as both a source and a destination of the information for their processing.",
        "page": 5,
        "bbox": [
          57.0,
          420.0379943847656,
          526.4620361328125,
          474.98199462890625
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• The wide variety of storage systems in a computer system can be organized in a",
        "page": 5,
        "bbox": [
          75.02400207519531,
          640.407958984375,
          526.416015625,
          693.2919311523438
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "hierarchy as shown in the figure, according to speed, cost and capacity. The higher levels are expensive, but they are fast. As we move down the hierarchy, the cost per bit generally decreases, whereas the access time and the capacity of storage generally increases. • In addition to differing in speed and cost, the various storage systems are either volatile",
        "page": 5,
        "bbox": [
          75.02400207519531,
          693.927978515625,
          526.780029296875,
          763.2479858398438
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "or nonvolatile. V olatile storage loses its contents when the power to the device is",
        "page": 5,
        "bbox": [
          93.02400207519531,
          763.7639770507812,
          526.4180908203125,
          777.0479736328125
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=878, height=489]",
        "page": 5,
        "bbox": [
          109.5,
          474.9599914550781,
          435.8599853515625,
          651.0599975585938
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 6,
        "bbox": [
          395.7099914550781,
          19.5,
          540.6099853515625,
          37.5
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "6 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 6,
        "bbox": [
          92.66400146484375,
          799.6503295898438,
          494.83502197265625,
          815.192626953125
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "removed. In the absence of expensive battery and generator backup systems, data must be written to nonvolatile storage for safekeeping. In the hierarchy shown in figure, the storage systems above the electronic disk are volatile, whereas those below are nonvolatile. • An electronic disk can be designed to be either volatile or nonvolatile. During normal",
        "page": 6,
        "bbox": [
          75.02400207519531,
          56.02796936035156,
          526.6599731445312,
          125.3719711303711
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "operation, the electronic disk stores data in a large DRAM array, which is volatile. But many electronic-disk devices contain a hidden magnetic hard disk and a battery for backup power. If external power is interrupted, the electronic-disk controller copies the data from RAM to the magnetic disk. Another form of electronic disk is flash memory.",
        "page": 6,
        "bbox": [
          93.02400207519531,
          125.88795471191406,
          526.6240234375,
          180.5719757080078
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "I/O Structure",
        "page": 6,
        "bbox": [
          57.0,
          181.0879669189453,
          129.739990234375,
          220.77198791503906
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 12.0,
          "flags": 20,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• A large portion of operating system code is dedicated to managing I/O, both because of its",
        "page": 6,
        "bbox": [
          75.02400207519531,
          220.760009765625,
          555.1701049804688,
          235.41200256347656
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "importance to the reliability and performance of a system and because of the varying nature of the devices. • Every device has a device controller, maintains some local buffer and a set of special- purpose",
        "page": 6,
        "bbox": [
          75.02400207519531,
          235.92799377441406,
          555.447998046875,
          277.6819763183594
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "registers. The device controller is responsible for moving the data between the peripheral devices. The operating systems have a device driver for each device controller. • Interrupt-driven I/O is well suited for moving small amounts of data but can produce high",
        "page": 6,
        "bbox": [
          75.02400207519531,
          278.3180236816406,
          555.4600219726562,
          319.9219665527344
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "overhead when used for bulk data movement such as disk I/O. To solve this problem, direct memory access (DMA) is used. • After setting up buffers, pointers, and counters for the I/O device, the device controller",
        "page": 6,
        "bbox": [
          75.02400207519531,
          320.5579833984375,
          555.4359741210938,
          362.281982421875
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "transfers an entire block of data directly to or from its own buffer storage to memory, with no intervention by the CPU. Only one interrupt is generated per block, to tell the device driver that the operation has completed.",
        "page": 6,
        "bbox": [
          57.0,
          362.7980041503906,
          555.43603515625,
          431.281982421875
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=600, height=385]",
        "page": 6,
        "bbox": [
          171.17999267578125,
          431.25,
          439.6199951171875,
          603.5
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 7,
        "bbox": [
          395.7099914550781,
          19.5,
          540.6099853515625,
          37.5
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "7 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 7,
        "bbox": [
          92.66400146484375,
          799.6503295898438,
          494.83502197265625,
          815.192626953125
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "heading",
        "content": "Computer System Architecture Categorized roughly according to the number of general-purpose processors used. Single-Processor Systems –",
        "page": 7,
        "bbox": [
          57.0,
          55.923370361328125,
          453.3399963378906,
          139.29200744628906
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "• The variety of single-processor systems range from PDAs through mainframes. On a single-",
        "page": 7,
        "bbox": [
          75.02400207519531,
          139.39996337890625,
          552.3759765625,
          154.0519561767578
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "processor system, there is one main CPU capable of executing instructions from user processes. It contains special-purpose processors, in the form of device-specific processors, for devices such as disk, keyboard, and graphics controllers. • All special-purpose processors run limited instructions and do not run user processes. These are",
        "page": 7,
        "bbox": [
          75.02400207519531,
          154.56800842285156,
          555.4119262695312,
          210.0919952392578
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "managed by the operating system; the operating system sends them information about their next task and monitors their status. • For example, a disk-controller processor, implements its own disk queue and scheduling",
        "page": 7,
        "bbox": [
          75.02400207519531,
          210.6079864501953,
          555.2420043945312,
          252.3319854736328
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "algorithm, thus reducing the task of main CPU. Special processors in the keyboard, converts the keystrokes into codes to be sent to the CPU. • The use of special-purpose microprocessors is common and does not turn a single- processor",
        "page": 7,
        "bbox": [
          75.02400207519531,
          252.8780059814453,
          555.4480590820312,
          294.6020202636719
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "system into a multiprocessor. If there is only one general-purpose CPU, then the system is a single-processor system. Multi -Processor Systems (parallel systems or tightly coupled systems) Systems that have two or more processors in close communication, sharing the computer bus, the clock, memory, and peripheral devices are the multiprocessor systems. Multiprocessor systems have three main advantages:",
        "page": 7,
        "bbox": [
          57.0,
          295.1180114746094,
          555.3260498046875,
          439.9219970703125
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "1. Increased throughput - In multiprocessor system, as there are multiple processors execution of different programs take place simultaneously. Even if the number of processors is increased the performance cannot be simultaneously increased. This is due to the overhead incurred in keeping all the parts working correctly and also due to the competition for the shared resources. The speed-up ratio with N processors is not N, rather, it is less than N. Thus the speed of the system is not has expected. 2. Economy of scale - Multiprocessor systems can cost less than equivalent number of many single-processor systems. As the multiprocessor systems share peripherals, mass storage, and power supplies, the cost of implementing this system is economical. If several processes are working on the same data, the data can also be shared among them.",
        "page": 7,
        "bbox": [
          66.02400207519531,
          440.3274230957031,
          555.3580932617188,
          613.3419799804688
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 12.0,
          "flags": 20,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "3. Increased reliability - In multiprocessor systems functions are shared among several processors. If one processor fails, the system is not halted, it only slows down. The job of the failed processor is taken up, by other processors. Two techniques to maintain ‘Increased Reliability’ - graceful degradation & fault tolerant",
        "page": 7,
        "bbox": [
          66.02400207519531,
          618.1973876953125,
          553.6580200195312,
          690.77197265625
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 12.0,
          "flags": 20,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "1. Graceful degradation – As there are multiple processors when one processor fails other",
        "page": 7,
        "bbox": [
          102.0199966430664,
          693.1600341796875,
          549.4580078125,
          706.6119995117188
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "process will take up its work and the system go down slowly. 2. Fault tolerant – When one processor fails, its operations are stopped, the system failure",
        "page": 7,
        "bbox": [
          102.0199966430664,
          709.16796875,
          547.0099487304688,
          738.4119873046875
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "is then detected, diagnosed, and corrected.",
        "page": 7,
        "bbox": [
          120.0199966430664,
          740.9639892578125,
          326.3500061035156,
          754.2479858398438
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 8,
        "bbox": [
          395.7099914550781,
          19.5,
          540.6099853515625,
          37.5
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "8 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 8,
        "bbox": [
          92.66400146484375,
          799.6503295898438,
          494.83502197265625,
          815.192626953125
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "Different types of multiprocessor systems",
        "page": 8,
        "bbox": [
          57.0,
          55.777427673339844,
          303.7459716796875,
          70.46062469482422
        ],
        "font": {
          "name": "SegoeScript-Bold",
          "size": 11.039999961853027,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "1. Asymmetric multiprocessing 2. Symmetric multiprocessing",
        "page": 8,
        "bbox": [
          57.0,
          91.15995788574219,
          249.77000427246094,
          132.2283172607422
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "1) Asymmetric multiprocessing – (Master/Slave architecture) Here each processor is",
        "page": 8,
        "bbox": [
          90.02400207519531,
          132.47744750976562,
          553.8281860351562,
          147.16064453125
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 12.0,
          "flags": 20,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "assigned a specific task, by the master processor. A master processor controls the other processors in the system. It schedules and allocates work to the slave processors.",
        "page": 8,
        "bbox": [
          57.0,
          150.3679962158203,
          553.5439453125,
          191.25196838378906
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "2) Symmetric multiprocessing (SMP) – All the processors are considered peers. There",
        "page": 8,
        "bbox": [
          90.02400207519531,
          191.63742065429688,
          553.7139282226562,
          206.32061767578125
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "is no master-slave relationship. All the processors have their own registers and CPU, only memory is shared.",
        "page": 8,
        "bbox": [
          108.0199966430664,
          209.52796936035156,
          553.7739868164062,
          236.61195373535156
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "The benefit of this model is that many processes can run simultaneously. N processes can run if there are N CPUs—without causing a significant deterioration of performance. Operating systems like Windows, Windows XP, Mac OS X, and Linux—now provide support for SMP. A recent trend in CPU design is to include multiple compute cores on a single chip. The communication between processors within a chip is faster than communication between two single processors.",
        "page": 8,
        "bbox": [
          57.0,
          386.43798828125,
          553.7979736328125,
          464.526611328125
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Clustered Systems Clustered systems are two or more individual systems connected together via a network and sharing software resources. Clustering provides high availability of resources and services. The service will continue even if one or more systems in the cluster fail. High availability is generally obtained by storing a copy of files (s/w resources) in the system. There are two types of Clustered systems – asymmetric and symmetric",
        "page": 8,
        "bbox": [
          57.0,
          614.4774169921875,
          553.864013671875,
          727.8519897460938
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 12.0,
          "flags": 20,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "1. Asymmetric clustering – one system is in hot-standby mode while the others are",
        "page": 8,
        "bbox": [
          90.02400207519531,
          728.2374267578125,
          553.8399658203125,
          742.920654296875
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 12.0,
          "flags": 20,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "running the applications. The hot-standby host machine does nothing but monitor the active server. If that server fails, the hot-standby host becomes the active server.",
        "page": 8,
        "bbox": [
          108.0199966430664,
          746.1239624023438,
          553.7060546875,
          773.2079467773438
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=748, height=359]",
        "page": 8,
        "bbox": [
          152.25,
          248.69998168945312,
          439.5,
          361.9499816894531
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=555, height=239]",
        "page": 8,
        "bbox": [
          191.25,
          473.699951171875,
          408.75,
          586.949951171875
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 9,
        "bbox": [
          395.7099914550781,
          19.5,
          540.6099853515625,
          37.5
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "9 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 9,
        "bbox": [
          92.66400146484375,
          799.6503295898438,
          494.83502197265625,
          815.192626953125
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "2. Symmetric clustering – two or more systems are running applications, and are",
        "page": 9,
        "bbox": [
          90.02400207519531,
          55.777427673339844,
          553.7059936523438,
          70.46062469482422
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 12.0,
          "flags": 20,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "monitoring each other. This mode is more efficient, as it uses all of the available hardware. If any system fails, its job is taken up by the monitoring system.",
        "page": 9,
        "bbox": [
          57.0,
          73.68800354003906,
          553.615966796875,
          114.57198333740234
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "Other forms of clusters include parallel clusters and clustering over a wide-area network (WAN). Parallel clusters allow multiple hosts to access the same data on the shared storage. Cluster technology is changing rapidly with the help of SAN (storage-area networks) . Using SAN resources can be shared with dozens of systems in a cluster, that are separated by miles. Operating System Structure",
        "page": 9,
        "bbox": [
          57.0,
          115.08796691894531,
          553.8519897460938,
          227.20364379882812
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "Explain multiprogramming and multitasking systems . Multiprogramming One of the most important aspects of operating systems is the ability to multiprogram. A single user cannot keep either the CPU or the I/O devices busy at all times. Multiprogramming increases CPU utilization by organizing jobs, so that the CPU always has one to execute.",
        "page": 9,
        "bbox": [
          57.0,
          231.11740112304688,
          553.8760986328125,
          480.3819885253906
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 12.0,
          "flags": 20,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Fig - Memory layout for a multiprogramming system",
        "page": 9,
        "bbox": [
          162.3800048828125,
          482.93798828125,
          421.1499938964844,
          496.22198486328125
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• The operating system keeps several jobs in memory simultaneously as shown in figure. This",
        "page": 9,
        "bbox": [
          75.02400207519531,
          498.7779846191406,
          553.5239868164062,
          528.9819946289062
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "set of jobs is a subset of the jobs kept in the job pool. Since the number of jobs that can be kept simultaneously in memory is usually smaller than the number of jobs that can be kept in the job pool (in secondary memory). The operating system picks and begins to execute one of the jobs in memory. Eventually, the job may have to wait for some tasks, such as an I/O operation, to complete. In a non-multiprogram system, the CPU would sit idle. • In a multiprogrammed system, the operating system simply switches to, and executes, another",
        "page": 9,
        "bbox": [
          75.02400207519531,
          531.41796875,
          553.8760375976562,
          625.011962890625
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "job. When that job needs to wait, the CPU is switched to another job, and so on. • Eventually, the first job finishes waiting and gets the CPU back. Thus, the CPU is never idle. • Multiprogrammed systems provide an environment in which the various system resources (for",
        "page": 9,
        "bbox": [
          75.02400207519531,
          627.5679931640625,
          553.6318359375,
          674.3319702148438
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "example, CPU, memory, and peripheral devices) are utilized effectively, but they do not provide for user interaction with the computer system.",
        "page": 9,
        "bbox": [
          57.0,
          676.887939453125,
          553.8639526367188,
          737.5206298828125
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=257, height=355]",
        "page": 9,
        "bbox": [
          216.0,
          338.8299560546875,
          313.14898681640625,
          481.27996826171875
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 10,
        "bbox": [
          395.7099914550781,
          19.5,
          540.6099853515625,
          37.5
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "10 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 10,
        "bbox": [
          85.58399963378906,
          799.6503295898438,
          494.83502197265625,
          815.192626953125
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "Multitasking Systems",
        "page": 10,
        "bbox": [
          57.0,
          56.02796936035156,
          170.4199981689453,
          69.31197357177734
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 12.0,
          "flags": 20,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• In Time sharing (or multitasking) systems, a single CPU executes multiple jobs by switching",
        "page": 10,
        "bbox": [
          75.02400207519531,
          69.82795715332031,
          556.2220458984375,
          97.7719955444336
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "among them, but the switches occur so frequently that the users can interact with each program while it is running. The user feels that all the programs are being executed at the same time. • Time sharing requires an interactive (or hands-on) computer system, which provides direct",
        "page": 10,
        "bbox": [
          75.02400207519531,
          98.28797912597656,
          556.4080200195312,
          140.01197814941406
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "communication between the user and the system. The user gives instructions to the operating system or to a program directly, using a input device such as a keyboard or a mouse, and waits for immediate results on an output device. Accordingly, the response time should be short— typically less than one second. • A time-shared operating system allows many users to share the computer simultaneously. As",
        "page": 10,
        "bbox": [
          75.02400207519531,
          140.52796936035156,
          556.3480834960938,
          209.8520050048828
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "the system switches rapidly from one user to the next, each user is given the impression that the entire computer system is dedicated to his use only, even though it is being shared among many users. • A multiprocessor system is a computer system having two or more CPUs within a single",
        "page": 10,
        "bbox": [
          75.02400207519531,
          210.3679962158203,
          556.3960571289062,
          265.9219665527344
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "computer system, each sharing main memory and peripherals. Multiple programs are executed by multiple processors parallel.",
        "page": 10,
        "bbox": [
          57.0,
          266.4380187988281,
          556.258056640625,
          308.23065185546875
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "Operating-System Operations Modern operating systems are interrupt driven. If there are no processes to execute, no I/O devices to service, and no users to whom to respond, an operating system will sit quietly, waiting for something to happen. Events are signaled by the occurrence of an interrupt or a trap. A trap (or an exception) is a software-generated interrupt. For each type of interrupt, separate segments of code in the operating system determine what action should be taken. An interrupt service routine is provided that is responsible for dealing with the interrupt.",
        "page": 10,
        "bbox": [
          57.0,
          407.18743896484375,
          556.4200439453125,
          557.3619995117188
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "Explain dual mode operation in operating system with a neat block diagram Dual-Mode Operation Since the operating system and the user programs share the hardware and software resources of the computer system, it has to be made sure that an error in a user program cannot cause problems to other programs and the Operating System running in the system.",
        "page": 10,
        "bbox": [
          57.0,
          560.6873779296875,
          556.3179931640625,
          651.0519409179688
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "The approach taken is to use a hardware support that allows us to differentiate among various modes of execution. The system can be assumed to work in two separate modes of operation:",
        "page": 10,
        "bbox": [
          57.0,
          651.5679931640625,
          555.9960327148438,
          706.1319580078125
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "1. User mode 2. Kernel mode (supervisor mode, system mode, or privileged mode).",
        "page": 10,
        "bbox": [
          75.02400207519531,
          707.2000122070312,
          418.2699890136719,
          735.2919311523438
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=582, height=136]",
        "page": 10,
        "bbox": [
          151.5,
          325.79998779296875,
          424.79998779296875,
          389.29998779296875
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 11,
        "bbox": [
          395.7099914550781,
          19.5,
          540.6099853515625,
          37.5
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "11 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 11,
        "bbox": [
          85.58399963378906,
          799.6503295898438,
          494.83502197265625,
          815.192626953125
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "• A hardware bit of the computer, called the mode bit , is used to indicate the current mode:",
        "page": 11,
        "bbox": [
          75.02400207519531,
          55.6199951171875,
          556.27001953125,
          70.2719955444336
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "kernel (0) or user (1). With the mode bit, we are able to distinguish between a task that is executed by the operating system and one that is executed by the user. • When the computer system is executing a user application, the system is in user mode. When a",
        "page": 11,
        "bbox": [
          75.02400207519531,
          72.70796203613281,
          556.2340698242188,
          118.7719955444336
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "user application requests a service from the operating system (via a system call), the transition from user to kernel mode takes place.",
        "page": 11,
        "bbox": [
          93.02400207519531,
          121.20796203613281,
          556.2020263671875,
          150.3319854736328
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "At system boot time, the hardware starts in kernel mode. The operating system is then loaded and starts user applications in user mode. Whenever a trap or interrupt occurs, the hardware switches from user mode to kernel mode (that is, changes the mode bit from 1 to 0). Thus, whenever the operating system gains control of the computer, it is in kernel mode. The dual mode of operation provides us with the means for protecting the operating system from errant users—and errant users from one another.",
        "page": 11,
        "bbox": [
          57.0,
          299.0779724121094,
          554.973876953125,
          450.0220031738281
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• The hardware allows privileged instructions to be executed only in kernel mode. If an attempt",
        "page": 11,
        "bbox": [
          74.42400360107422,
          450.0099792480469,
          554.760009765625,
          464.6619873046875
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "is made to execute a privileged instruction in user mode, the hardware does not execute the instruction but rather treats it as illegal and traps it to the operating system. The instruction to switch to user mode is an example of a privileged instruction. • Initial control is within the operating system, where instructions are executed in kernel mode.",
        "page": 11,
        "bbox": [
          74.42400360107422,
          465.1780090332031,
          554.93798828125,
          534.501953125
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "When control is given to a user application, the mode is set to user mode. Eventually, control is switched back to the operating system via an interrupt, a trap, or a system call. Process Management",
        "page": 11,
        "bbox": [
          57.0,
          535.0179443359375,
          554.7840576171875,
          608.0619506835938
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "• A program under execution is a process. A process needs resources like CPU time, memory,",
        "page": 11,
        "bbox": [
          75.02400207519531,
          608.0800170898438,
          554.8099975585938,
          622.7319946289062
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "files, and I/O devices for its execution. These resources are given to the process when it is created or at run time. When the process terminates, the operating system reclaims the resources.",
        "page": 11,
        "bbox": [
          57.0,
          623.2479858398438,
          555.0999755859375,
          677.9319458007812
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• The program stored on a disk is a passive entity and the program under execution is an active",
        "page": 11,
        "bbox": [
          75.02400207519531,
          677.9199829101562,
          555.075927734375,
          692.5719604492188
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "entity . A single-threaded process has one program counter specifying the next instruction to execute. The CPU executes one instruction of the process after another, until the process completes. A multithreaded process has multiple program counters, each pointing to the next instruction to execute for a given thread.",
        "page": 11,
        "bbox": [
          57.0,
          693.0879516601562,
          554.998046875,
          775.3679809570312
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 12.0,
          "flags": 20,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=726, height=282]",
        "page": 11,
        "bbox": [
          108.30000305175781,
          156.95997619628906,
          501.97998046875,
          309.65997314453125
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 12,
        "bbox": [
          395.7099914550781,
          19.5,
          540.6099853515625,
          37.5
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "12 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 12,
        "bbox": [
          85.58399963378906,
          799.6503295898438,
          494.83502197265625,
          815.192626953125
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "• The operating system is responsible for the following activities in connection with process",
        "page": 12,
        "bbox": [
          75.02400207519531,
          55.5,
          555.0761108398438,
          70.1520004272461
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "management:",
        "page": 12,
        "bbox": [
          93.02400207519531,
          70.66798400878906,
          160.6999969482422,
          83.95198822021484
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "• Scheduling process and threads on the CPU • Creating and deleting both user and system processes • Suspending and resuming processes • Providing mechanisms for process synchronization • Providing mechanisms for process communication Memory Management Main memory is a large array of words or bytes. Each word or byte has its own address. Main memory is the storage device which can be easily and directly accessed by the CPU. As the program executes, the central processor reads instructions and also reads and writes data from main memory. To improve both the utilization of the CPU and the speed of the computer's response to its users, general-purpose computers must keep several programs in memory, creating a need for memory management. The operating system is responsible for the following activities in connection with memory management:",
        "page": 12,
        "bbox": [
          57.0,
          83.719970703125,
          554.8580322265625,
          367.5619812011719
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "heading",
        "content": "• Keeping track of which parts of memory are currently being used by user. • Deciding which processes and data to move into and out of memory. • Allocating and deallocating memory space as needed. Storage Management There are three types of storage management",
        "page": 12,
        "bbox": [
          57.0,
          367.54998779296875,
          450.1000061035156,
          484.7019958496094
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "heading",
        "content": "i) File system management ii) Mass-storage management iii) Cache management. File-System Management",
        "page": 12,
        "bbox": [
          55.87223434448242,
          485.04998779296875,
          249.6820526123047,
          571.4136352539062
        ],
        "font": {
          "name": "SegoeScript-Bold",
          "size": 14.039999961853027,
          "flags": 16,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "• File management is one of the most visible components of an operating system. Computers can",
        "page": 12,
        "bbox": [
          75.02400207519531,
          575.0499877929688,
          554.9060668945312,
          589.7019653320312
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "store information on several different types of physical media. Magnetic disk, optical disk, and magnetic tape are the most common. Each of these media has its own characteristics and physical organization. Each medium is controlled by a device, such as a disk drive or tape drive, that also has its own unique characteristics. • A file is a collection of related information defined by its creator. Commonly, files represent",
        "page": 12,
        "bbox": [
          75.02400207519531,
          592.2579345703125,
          554.7479858398438,
          670.011962890625
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "programs and data. Data files may be numeric, alphabetic, alphanumeric, or binary. Files may be free-form (for example, text files), or they may be formatted rigidly (for example, fixed fields). • The operating system implements the abstract concept of a file by managing mass storage",
        "page": 12,
        "bbox": [
          75.02400207519531,
          672.447998046875,
          555.0880126953125,
          734.3319702148438
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "media. Files are normally organized into directories to make them easier to use. When multiple users have access to files, it may be desirable to control by whom and in what ways (read, write, execute) files may be accessed.",
        "page": 12,
        "bbox": [
          93.02400207519531,
          736.7639770507812,
          554.699951171875,
          781.8479614257812
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 13,
        "bbox": [
          395.7099914550781,
          19.5,
          540.6099853515625,
          37.5
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "13 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 13,
        "bbox": [
          85.58399963378906,
          799.6503295898438,
          494.83502197265625,
          815.192626953125
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "The operating system is responsible for the following activities in connection with file management:",
        "page": 13,
        "bbox": [
          57.0,
          56.02796936035156,
          541.6599731445312,
          85.1520004272461
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "• Creating and deleting files • Creating and deleting directories to organize files • Supporting primitives for manipulating files and directories • Mapping files onto secondary storage • Backing up files on stable (nonvolatile) storage media Mass-Storage Management",
        "page": 13,
        "bbox": [
          55.87223434448242,
          87.32000732421875,
          450.82000732421875,
          205.48361206054688
        ],
        "font": {
          "name": "SegoeScript-Bold",
          "size": 14.039999961853027,
          "flags": 16,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "• As the main memory is too small to accommodate all data and programs, and as the data that it",
        "page": 13,
        "bbox": [
          75.02400207519531,
          209.239990234375,
          554.7840576171875,
          223.89198303222656
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "holds are erased when power is lost, the computer system must provide secondary storage to back up main memory. Most modern computer systems use disks as the storage medium for both programs and data.",
        "page": 13,
        "bbox": [
          57.0,
          226.3279571533203,
          554.9859619140625,
          287.2820129394531
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Most programs—including compilers, assemblers, word processors, editors, and formatters—",
        "page": 13,
        "bbox": [
          75.02400207519531,
          289.42999267578125,
          552.0999755859375,
          304.0820007324219
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "are stored on a disk until loaded into memory and then use the disk as both the source and destination of their processing. Hence, the proper management of disk storage is of central importance to a computer system. The operating system is responsible for the following activities in connection with disk management:",
        "page": 13,
        "bbox": [
          57.0,
          306.6379699707031,
          554.8818969726562,
          383.5220031738281
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Free-space management • Storage allocation • Disk scheduling",
        "page": 13,
        "bbox": [
          144.02000427246094,
          385.66998291015625,
          281.2099914550781,
          433.802001953125
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "As the secondary storage is used frequently, it must be used efficiently. The entire speed of operation of a computer may depend on the speeds of the disk. Magnetic tape drives and their tapes, CD, DVD drives and platters are tertiary storage devices. The functions that operating systems provides include mounting and unmounting media in devices, allocating and freeing the devices for exclusive use by processes, and migrating data from secondary to tertiary storage. Caching",
        "page": 13,
        "bbox": [
          55.87223434448242,
          440.8179931640625,
          554.9740600585938,
          554.3736572265625
        ],
        "font": {
          "name": "SegoeScript-Bold",
          "size": 14.039999961853027,
          "flags": 16,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "• Caching is an important principle of computer systems. Information is normally kept in some",
        "page": 13,
        "bbox": [
          75.02400207519531,
          558.0123901367188,
          554.8341064453125,
          572.1819458007812
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 12.0,
          "flags": 20,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "storage system (such as main memory). As it is used, it is copied into a faster storage system— the cache—as temporary data. When a particular piece of information is required, first we check whether it is in the cache. If it is, we use the information directly from the cache; if it is not in cache, we use the information from the source, putting a copy in the cache under the assumption that we will need it again soon. • Because caches have limited size, cache management is an important design problem. Careful",
        "page": 13,
        "bbox": [
          75.02400207519531,
          574.7379760742188,
          555.0999755859375,
          668.3319702148438
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "selection of the cache size and page replacement policy can result in greatly increased performance. • The movement of information between levels of a storage hierarchy may be either explicit or",
        "page": 13,
        "bbox": [
          75.02400207519531,
          670.887939453125,
          555.1119995117188,
          716.8119506835938
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "implicit, depending on the hardware design and the controlling operating-system software. For instance, data transfer from cache to CPU and registers is usually a hardware function, with no operating-system intervention. In contrast, transfer of data from disk to memory is usually controlled by the operating system.",
        "page": 13,
        "bbox": [
          93.02400207519531,
          719.2479858398438,
          555.0399169921875,
          780.16796875
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 14,
        "bbox": [
          395.7099914550781,
          19.5,
          540.6099853515625,
          37.5
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "14 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 14,
        "bbox": [
          85.58399963378906,
          799.6503295898438,
          494.83502197265625,
          815.192626953125
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "• In a hierarchical storage structure, the same data may appear in different levels of the storage",
        "page": 14,
        "bbox": [
          75.02400207519531,
          55.6199951171875,
          554.7599487304688,
          70.2719955444336
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "system. For example, suppose to retrieve an integer A from magnetic disk to the processing program. The operation proceeds by first issuing an I/O operation to copy the disk block on which A resides to main memory. This operation is followed by copying A to the cache and to an internal register. Thus, the copy of A appears in several places: on the magnetic disk, in main memory, in the cache, and in an internal register.",
        "page": 14,
        "bbox": [
          93.02400207519531,
          72.70796203613281,
          555.0999755859375,
          149.49195861816406
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• In a multiprocessor environment, in addition to maintaining internal registers, each of the",
        "page": 14,
        "bbox": [
          75.02400207519531,
          237.20001220703125,
          554.760009765625,
          251.8520050048828
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "CPUs also contains a local cache. In such an environment, a copy of A may exist simultaneously in several caches. Since the various CPUs can all execute concurrently, any update done to the value of A in one cache is immediately reflected in all other caches where A resides. This situation is called cache coherency, and it is usually a hardware problem (handled below the operating-system level).",
        "page": 14,
        "bbox": [
          93.02400207519531,
          254.31800842285156,
          555.0880737304688,
          331.0820007324219
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "I/O Systems",
        "page": 14,
        "bbox": [
          55.87223434448242,
          338.197998046875,
          152.9320068359375,
          370.39361572265625
        ],
        "font": {
          "name": "SegoeScript-Bold",
          "size": 14.039999961853027,
          "flags": 16,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "One of the purposes of an operating system is to hide the peculiarities of specific hardware devices from the user. The I/O subsystem consists of several components:",
        "page": 14,
        "bbox": [
          57.0,
          374.43798828125,
          534.412109375,
          401.5220031738281
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "• A memory-management component that includes buffering, caching, and spooling • A general device-driver interface • Drivers for specific hardware devices Only the device driver knows the peculiarities of the specific device to which it is assigned. Protection and Security",
        "page": 14,
        "bbox": [
          57.0,
          401.5099792480469,
          499.29998779296875,
          532.6626586914062
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "• If a computer system has multiple users and allows the concurrent execution of multiple",
        "page": 14,
        "bbox": [
          75.02400207519531,
          532.9299926757812,
          554.7479858398438,
          547.5819702148438
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "processes, then access to data must be regulated. For that purpose, mechanisms ensure that files, memory segments, CPU, and other resources can be operated on by only those processes that have gained proper authorization from the operating system. • For example, memory-addressing hardware ensures that a process can execute only within its",
        "page": 14,
        "bbox": [
          75.02400207519531,
          550.0179443359375,
          554.998046875,
          611.9019775390625
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "own address space. The timer ensures that no process can gain control of the CPU for a long time. Device-control registers are not accessible to users, so the integrity of the various peripheral devices is protected. • Protection is a mechanism for controlling the access of processes or users to the resources",
        "page": 14,
        "bbox": [
          75.02400207519531,
          614.3679809570312,
          554.8160400390625,
          676.251953125
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "defined by a computer system. This mechanism must provide means for specification of the controls to be imposed and means for enforcement. • Protection improves reliability. A protection-oriented system provides a means to distinguish",
        "page": 14,
        "bbox": [
          75.02400207519531,
          678.8079833984375,
          554.9501342773438,
          724.7319946289062
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "between authorized and unauthorized usage. A system can have adequate protection but still be prone to failure and allow inappropriate access. • Consider a user whose authentication information is stolen. Her data could be copied or",
        "page": 14,
        "bbox": [
          75.02400207519531,
          727.16796875,
          554.9658813476562,
          773.2079467773438
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=1111, height=158]",
        "page": 14,
        "bbox": [
          138.3000030517578,
          167.30001831054688,
          464.4000244140625,
          211.70001220703125
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 15,
        "bbox": [
          395.7099914550781,
          37.5,
          540.6099853515625,
          55.5
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "15 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 15,
        "bbox": [
          85.58399963378906,
          801.09033203125,
          494.83502197265625,
          816.6326293945312
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "deleted, even though file and memory protection are working. It is the job of security to defend a system from external and internal attacks. Such attacks spread across a huge range and include viruses and worms, denial-of service attacks etc. • Protection and security require the system to be able to distinguish among all its users. Most",
        "page": 15,
        "bbox": [
          75.02400207519531,
          74.04798889160156,
          555.0999755859375,
          135.9319610595703
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "operating systems maintain a list of user names and associated user identifiers (user IDs). When a user logs in to the system, the authentication stage determines the appropriate user ID for the user.",
        "page": 15,
        "bbox": [
          93.02400207519531,
          138.3679962158203,
          555.02197265625,
          183.4519805908203
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "Distributed Systems",
        "page": 15,
        "bbox": [
          57.0,
          185.51742553710938,
          180.64999389648438,
          234.8926239013672
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "• A distributed system is a collection of systems that are networked to provide the users with",
        "page": 15,
        "bbox": [
          75.02400207519531,
          235.15997314453125,
          554.699951171875,
          249.8119659423828
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "access to the various resources in the network. Access to a shared resource increases computation speed, functionality, data availability, and reliability. • A network is a communication path between two or more systems. Networks vary by the",
        "page": 15,
        "bbox": [
          75.02400207519531,
          252.27796936035156,
          554.9420166015625,
          298.3219909667969
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "protocols used(TCP/IP,UDP,FTP etc.), the distances between nodes, and the transport media(copper wires, fiber-optic,wireless). • TCP/IP is the most common network protocol. The operating systems support of protocols also",
        "page": 15,
        "bbox": [
          75.02400207519531,
          300.7580261230469,
          554.9979858398438,
          346.6820068359375
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "varies. Most operating systems support TCP/IP, including the Windows and UNIX operating systems. • Networks are characterized based on the distances between their nodes. A local-area network",
        "page": 15,
        "bbox": [
          75.02400207519531,
          349.2380065917969,
          555.0999755859375,
          395.1619873046875
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "(LAN) connects computers within a room, a floor, or a building. A wide-area network (WAN) usually links buildings, cities, or countries. A global company may have a WAN to connect its offices worldwide. These networks may run one protocol or several protocols. A metropolitan-area network (MAN) connects buildings within a city. BlueTooth and 802.11 devices use wireless technology to communicate over a distance of several feet, in essence creating a small-area network such as might be found in a home. • The transportation media to carry networks are also varied. They include copper wires, fiber",
        "page": 15,
        "bbox": [
          75.02400207519531,
          397.7179870605469,
          555.0520629882812,
          507.1419982910156
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 12.0,
          "flags": 20,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "strands, and wireless transmissions between satellites, microwave dishes, and radios. When computing devices are connected to cellular phones, they create a network. Special Purpose Systems Multimedia Systems",
        "page": 15,
        "bbox": [
          56.036094665527344,
          509.6980285644531,
          555.0640869140625,
          636.5919799804688
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "• Multimedia data consist of audio and video files as well as conventional files. These data differ",
        "page": 15,
        "bbox": [
          75.02400207519531,
          639.7599487304688,
          554.77197265625,
          654.4119262695312
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "from conventional data in that multimedia data—such as frames of video—must be delivered (streamed) according to certain time restrictions (for example, 30 frames per second). • Multimedia describes a wide range of applications like audio files - MP3, DVD movies, video",
        "page": 15,
        "bbox": [
          75.02400207519531,
          656.9679565429688,
          555.0399780273438,
          702.8919677734375
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "conferencing, and short video clips of movie previews or news. Multimedia applications may also include live webcasts of speeches or sporting events and even live webcams. Multimedia applications can be either audio or video or combination of both. For example, a movie may consist of separate audio and video tracks.",
        "page": 15,
        "bbox": [
          57.0,
          705.447998046875,
          554.8580322265625,
          782.3279418945312
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 16,
        "bbox": [
          395.7099914550781,
          37.5,
          540.6099853515625,
          55.5
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "16 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 16,
        "bbox": [
          85.58399963378906,
          801.09033203125,
          494.83502197265625,
          816.6326293945312
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "Handheld Systems",
        "page": 16,
        "bbox": [
          56.036094665527344,
          73.83196258544922,
          183.89556884765625,
          89.79196166992188
        ],
        "font": {
          "name": "SegoeScript-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Handheld systems include personal digital assistants (PDAs), such as Palm and Pocket-PCs,",
        "page": 16,
        "bbox": [
          75.02400207519531,
          92.9599609375,
          555.0761108398438,
          107.6119613647461
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "and cellular telephones. Developers of these systems face many challenges, due to the limited memory, slow processors and small screens in such devices. • The amount of physical memory in a handheld depends upon the device, the operating system",
        "page": 16,
        "bbox": [
          75.02400207519531,
          110.04798889160156,
          554.7962036132812,
          156.0919952392578
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "and applications must manage memory efficiently. This includes returning all allocated memory back to the memory manager when the memory is not being used. A second issue of concern to developers of handheld devices is the speed of the processor used in the devices. Processors for most handheld devices run at faster speed than the processor in a PC. Faster processors require more power and so, a larger battery is required. Another issue is the usage of I/O devices. • Generally, the limitations in the functionality of PDAs are balanced by their convenience and",
        "page": 16,
        "bbox": [
          75.02400207519531,
          158.52796936035156,
          554.8941040039062,
          267.9620056152344
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "portability. Their use continues to expand as network connections become more available and other options, such as digital cameras and MP3 players, expand their utility. Computing Environments The different computing environments are - Traditional Computing",
        "page": 16,
        "bbox": [
          56.036094665527344,
          270.5179748535156,
          554.9620361328125,
          387.9019775390625
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "• The current trend is toward providing more ways to access these computing environments.",
        "page": 16,
        "bbox": [
          75.02400207519531,
          390.9499816894531,
          554.8320922851562,
          405.60198974609375
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Web technologies are stretching the boundaries of traditional computing. Companies establish portals, which provide web accessibility to their internal servers. Network computers are essentially terminals that understand web-based computing. Handheld computers can synchronize with PCs to allow very portable use of company information. Handheld PDAs can also connect to wireless networks to use the company's web portal. The fast data connections are allowing home computers to serve up web pages and to use networks. Some homes even have firewalls to protect their networks.",
        "page": 16,
        "bbox": [
          57.0,
          406.1180114746094,
          555.0880126953125,
          516.02197265625
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• In the latter half of the previous century, computing resources were scarce. Years before,",
        "page": 16,
        "bbox": [
          75.02400207519531,
          516.1299438476562,
          554.7359619140625,
          530.7819213867188
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "systems were either batch or interactive. Batch system processed jobs in bulk, with predetermined input (from files or other sources of data). Interactive systems waited for input from users. To optimize the use of the computing resources, multiple users shared time on these systems. Time-sharing systems used a timer and scheduling algorithms to rapidly cycle processes through the CPU, giving each user a share of the resources.",
        "page": 16,
        "bbox": [
          57.0,
          531.2979736328125,
          555.0519409179688,
          613.5819702148438
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Today, traditional time-sharing systems are used everywhere. The same scheduling technique",
        "page": 16,
        "bbox": [
          75.02400207519531,
          613.5999755859375,
          554.8939208984375,
          628.251953125
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "is still in use on workstations and servers, but frequently the processes are all owned by the same user (or a single user and the operating system). User processes, and system processes that provide services to the user, are managed so that each frequently gets a slice of computer time. Client-Server Computing",
        "page": 16,
        "bbox": [
          56.036094665527344,
          628.7679443359375,
          554.9981079101562,
          729.5919799804688
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Designers shifted away from centralized system architecture to - terminals connected to centralized systems. As a result, many of today’s systems act as server systems to satisfy requests generated by client systems. This form of specialized distributed system, called client- server system.",
        "page": 16,
        "bbox": [
          57.0,
          733.1639404296875,
          552.5800170898438,
          774.0479736328125
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 17,
        "bbox": [
          395.7099914550781,
          37.5,
          540.6099853515625,
          55.5
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "17 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 17,
        "bbox": [
          85.58399963378906,
          801.09033203125,
          494.83502197265625,
          816.6326293945312
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "General Structure of Client – Server System",
        "page": 17,
        "bbox": [
          108.0199966430664,
          178.55740356445312,
          442.2759704589844,
          218.13197326660156
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Server systems can be broadly categorized as compute servers and file servers:",
        "page": 17,
        "bbox": [
          72.02400207519531,
          223.2079620361328,
          453.3399963378906,
          236.49195861816406
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• The compute-server system provides an interface to which a client can send a request to",
        "page": 17,
        "bbox": [
          90.02400207519531,
          238.6400146484375,
          554.8780517578125,
          253.29200744628906
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "perform an action (for example, read data); in response, the server executes the action and sends back results to the client. A server running a database that responds to client requests for data is an example of such a system. • The file-server system provides a file-system interface where clients can create, update,",
        "page": 17,
        "bbox": [
          90.02400207519531,
          255.7580108642578,
          554.906005859375,
          317.6419982910156
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "read, and delete files. An example of such a system is a web server that delivers files to clients running the web browsers. Peer-to-Peer Computing",
        "page": 17,
        "bbox": [
          56.036094665527344,
          320.0780029296875,
          554.6600341796875,
          381.9019775390625
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• In this model, clients and servers are not distinguished from one another; here, all nodes within",
        "page": 17,
        "bbox": [
          75.02400207519531,
          387.9499816894531,
          555.0520629882812,
          402.60198974609375
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "the system are considered peers, and each may act as either a client or a server, depending on whether it is requesting or providing a service. • In a client-server system, the server is a bottleneck, because all the services must be served by",
        "page": 17,
        "bbox": [
          75.02400207519531,
          405.0379943847656,
          554.8219604492188,
          451.10198974609375
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "the server. But in a peer-to-peer system, services can be provided by several nodes distributed throughout the network. • To participate in a peer-to-peer system, a node must first join the network of peers. Once a",
        "page": 17,
        "bbox": [
          75.02400207519531,
          453.5379943847656,
          554.8699951171875,
          499.5820007324219
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "node has joined the network, it can begin providing services to—and requesting services from—other nodes in the network. Determining what services are available is accomplished in one of two general ways:",
        "page": 17,
        "bbox": [
          57.0,
          502.0179748535156,
          555.0220336914062,
          562.9419555664062
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• When a node joins a network, it registers its service with a centralized lookup service on the",
        "page": 17,
        "bbox": [
          90.02400207519531,
          565.0900268554688,
          555.075927734375,
          579.7420043945312
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "network. Any node desiring a specific service first contacts this centralized lookup service to determine which node provides the service. The remainder of the communication takes place between the client and the service provider. • A peer acting as a client must know, which node provides a desired service by broadcasting",
        "page": 17,
        "bbox": [
          90.02400207519531,
          582.2979736328125,
          554.906005859375,
          644.0919799804688
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "a request for the service to all other nodes in the network. The node (or nodes) providing that service responds to the peer making the request. To support this approach, a discovery protocol must be provided that allows peers to discover services provided by other peers in the network.",
        "page": 17,
        "bbox": [
          57.0,
          646.64794921875,
          555.088134765625,
          736.6609497070312
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 18,
        "bbox": [
          395.7099914550781,
          37.5,
          540.6099853515625,
          55.5
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "18 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 18,
        "bbox": [
          85.58399963378906,
          801.09033203125,
          494.83502197265625,
          816.6326293945312
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "Web-Based Computing",
        "page": 18,
        "bbox": [
          56.036094665527344,
          181.17098999023438,
          387.19000244140625,
          237.39199829101562
        ],
        "font": {
          "name": "SegoeScript-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Web computing has increased the importance on networking. Devices that were not previously",
        "page": 18,
        "bbox": [
          75.02400207519531,
          243.44000244140625,
          554.7120971679688,
          258.0920104980469
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "networked now include wired or wireless access. Devices that were networked now have faster network connectivity. • The implementation of web-based computing has given rise to new categories of devices, such",
        "page": 18,
        "bbox": [
          75.02400207519531,
          260.5580139160156,
          554.8819580078125,
          306.6020202636719
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "as load balancers, which distribute network connections among a pool of similar servers. Operating systems like Windows 95, which acted as web clients, have evolved into Linux and Windows XP, which can act as web servers as well as clients. Generally, the Web has increased the complexity of devices, because their users require them to be web-enabled. • The design of an operating system is a major task. It is important that the goals of the new",
        "page": 18,
        "bbox": [
          75.02400207519531,
          309.0379943847656,
          555.010009765625,
          386.7619934082031
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "system be well defined before the design of OS begins. These goals form the basis for choices among various algorithms and strategies.",
        "page": 18,
        "bbox": [
          93.02400207519531,
          389.197998046875,
          554.760009765625,
          418.4419860839844
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 19,
        "bbox": [
          395.7099914550781,
          37.5,
          540.6099853515625,
          55.5
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "19 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 19,
        "bbox": [
          85.58399963378906,
          801.09033203125,
          494.83502197265625,
          816.6326293945312
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "heading",
        "content": "OPERATING SYSTEM SERVICES",
        "page": 19,
        "bbox": [
          179.17999267578125,
          74.2396011352539,
          433.8999938964844,
          91.90731811523438
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 15.960000038146973,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "heading",
        "content": "Operating-System Services Q) List and explain the services provided by OS for the user and efficient",
        "page": 19,
        "bbox": [
          57.0,
          92.59964752197266,
          498.7322998046875,
          175.84063720703125
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "operation of system.",
        "page": 19,
        "bbox": [
          57.0,
          178.91744995117188,
          177.2360076904297,
          193.60064697265625
        ],
        "font": {
          "name": "SegoeScript-Bold",
          "size": 11.039999961853027,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "An operating system provides an environment for the execution of programs. It provides certain services to programs and to the users of those programs.",
        "page": 19,
        "bbox": [
          39.0,
          196.55740356445312,
          554.9740600585938,
          243.87197875976562
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "OS provide services for the users of the system, including:",
        "page": 19,
        "bbox": [
          57.0,
          496.01800537109375,
          345.42999267578125,
          523.2219848632812
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 12.0,
          "flags": 20,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• User Interfaces - Means by which users can issue commands to the system. Depending on the",
        "page": 19,
        "bbox": [
          75.02400207519531,
          522.322021484375,
          554.719970703125,
          538.2820434570312
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "operating system these may be a command-line interface ( e.g. sh, csh, ksh, tcsh, etc.), a Graphical User Interface (e.g. Windows, X-Windows, KDE, Gnome, etc.), or a batch command systems . In Command Line Interface (CLI)- commands are given to the system. In Batch interface – commands and directives to control these commands are put in a file and then the file is executed. In GUI systems- windows with pointing device to get inputs and keyboard to enter the text. • Program Execution - The OS must be able to load a program into RAM, run the program, and",
        "page": 19,
        "bbox": [
          75.02400207519531,
          540.5379638671875,
          555.0640258789062,
          665.9319458007812
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "terminate the program, either normally or abnormally. • I/O Operations - The OS is responsible for transferring data to and from I/O devices,",
        "page": 19,
        "bbox": [
          75.02400207519531,
          668.3679809570312,
          555.0759887695312,
          698.5719604492188
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "including keyboards, terminals, printers, and files. For specific devices, special functions are provided (device drivers) by OS. • File-System Manipulation – Programs need to read and write files or directories. The services",
        "page": 19,
        "bbox": [
          75.02400207519531,
          701.0079345703125,
          554.833984375,
          747.0479736328125
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "required to create or delete files, search for a file, list the contents of a file and change the file permissions are provided by OS.",
        "page": 19,
        "bbox": [
          93.02400207519531,
          749.4839477539062,
          554.7258911132812,
          778.6079711914062
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=1346, height=672]",
        "page": 19,
        "bbox": [
          94.19999694824219,
          263.3699645996094,
          516.2999877929688,
          452.969970703125
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 20,
        "bbox": [
          395.7099914550781,
          37.5,
          540.6099853515625,
          55.5
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "20 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 20,
        "bbox": [
          85.58399963378906,
          801.09033203125,
          494.83502197265625,
          816.6326293945312
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "• Communications - Inter-process communications, IPC, either between processes running on",
        "page": 20,
        "bbox": [
          75.02400207519531,
          73.6400146484375,
          554.8820190429688,
          88.2920150756836
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "the same processor, or between processes running on separate processors or separate machines. May be implemented by using the service of OS- like shared memory or message passing. • Error Detection - Both hardware and software errors must be detected and handled",
        "page": 20,
        "bbox": [
          75.02400207519531,
          90.84797668457031,
          554.9620361328125,
          136.77198791503906
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "appropriately by the OS. Errors may occur in the CPU and memory hardware (such as power failure and memory error), in I/O devices (such as a parity error on tape, a connection failure on a network, or lack of paper in the printer), and in the user program (such as an arithmetic overflow, an attempt to access an illegal memory location). OS provide services for the efficient operation of the system, including:",
        "page": 20,
        "bbox": [
          57.0,
          139.2079620361328,
          555.0100708007812,
          244.0519561767578
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Resource Allocation – Resources like CPU cycles, main memory, storage space, and I/O",
        "page": 20,
        "bbox": [
          75.02400207519531,
          244.15997314453125,
          554.8579711914062,
          258.8119812011719
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "devices must be allocated to multiple users and multiple jobs at the same time. • Accounting – There are services in OS to keep track of system activity and resource usage,",
        "page": 20,
        "bbox": [
          75.02400207519531,
          261.2779846191406,
          554.76806640625,
          291.6619567871094
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "either for billing purposes or for statistical record keeping that can be used to optimize future performance. • Protection and Security – The owners of information (file) in multiuser or networked",
        "page": 20,
        "bbox": [
          75.02400207519531,
          293.9179992675781,
          555.0999755859375,
          340.1419677734375
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "computer system may want to control the use of that information. When several separate processes execute concurrently, one process should not interfere with other or with OS. Protection involves ensuring that all access to system resources is controlled. Security of the system from outsiders must also be done, by means of a password. User Operating-System Interface",
        "page": 20,
        "bbox": [
          57.0,
          342.39801025390625,
          554.85595703125,
          436.40264892578125
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "There are several ways for users to interface with the operating system.",
        "page": 20,
        "bbox": [
          57.0,
          441.89801025390625,
          401.95001220703125,
          467.3509521484375
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "i) Command-line interface, or command interpreter, allows users to directly enter commands to be performed by the operating system. ii) Graphical user interface (GUI), allows users to interface with the operating system using pointer device and menu system. Command Interpreter",
        "page": 20,
        "bbox": [
          56.036094665527344,
          467.6499938964844,
          548.984130859375,
          566.3619995117188
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Command Interpreters are used to give commands to the OS. There are multiple command",
        "page": 20,
        "bbox": [
          75.02400207519531,
          574.4500122070312,
          554.7000122070312,
          589.1019897460938
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "interpreters known as shells. In UNIX and Linux systems, there are several different shells, like the Bourne shell, C shell, Bourne-Again shell, Korn shell, and others. • The main function of the command interpreter is to get and execute the user-specified",
        "page": 20,
        "bbox": [
          75.02400207519531,
          591.657958984375,
          555.0880126953125,
          637.6119995117188
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "command. Many of the commands manipulate files: create, delete, list, print, copy, execute, and so on.",
        "page": 20,
        "bbox": [
          93.02400207519531,
          640.0479736328125,
          554.8681030273438,
          669.2919311523438
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "The commands can be implemented in two general ways-",
        "page": 20,
        "bbox": [
          57.0,
          681.8079833984375,
          336.6700134277344,
          707.13134765625
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "i) The command interpreter itself contains the code to execute the command. For example, a command to delete a file may cause the command interpreter to jump to a particular section of its code that sets up the parameters and makes the appropriate system call. ii) The code to implement the command is in a function in a separate file. The interpreter searches for the file and loads it into the memory and executes it by passing the parameter.",
        "page": 20,
        "bbox": [
          75.02400207519531,
          707.4400024414062,
          555.0640869140625,
          784.3679809570312
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 21,
        "bbox": [
          395.7099914550781,
          37.5,
          540.6099853515625,
          55.5
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "21 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 21,
        "bbox": [
          85.58399963378906,
          801.09033203125,
          494.83502197265625,
          816.6326293945312
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "Thus by adding new functions new commands can be added easily to the interpreter without disturbing it.",
        "page": 21,
        "bbox": [
          57.0,
          74.04798889160156,
          554.8460083007812,
          122.90332794189453
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Graphical User Interfaces",
        "page": 21,
        "bbox": [
          56.036094665527344,
          126.51195526123047,
          228.92556762695312,
          142.47195434570312
        ],
        "font": {
          "name": "SegoeScript-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• A second strategy for interfacing with the operating system is through a userfriendly graphical",
        "page": 21,
        "bbox": [
          75.02400207519531,
          148.39996337890625,
          555.083984375,
          163.0519561767578
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "user interface or GUI. Rather than having users directly enter commands via a command-line interface, a GUI allows provides a mouse-based window-and-menu system as an interface. • A GUI provides a desktop metaphor where the mouse is moved to position its pointer on",
        "page": 21,
        "bbox": [
          75.02400207519531,
          165.6079864501953,
          555.43603515625,
          211.53199768066406
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "images, or icons, on the screen (the desktop) that represent programs, files, directories, and system functions. • Depending on the mouse pointer's location, clicking a button on the mouse can invoke a",
        "page": 21,
        "bbox": [
          75.02400207519531,
          214.0879669189453,
          555.241943359375,
          260.0119934082031
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "program, select a file or directory—known as a folder— or pull down a menu that contains commands. System Calls",
        "page": 21,
        "bbox": [
          57.0,
          262.4779968261719,
          555.3460693359375,
          348.2933349609375
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "Q) What are system calls? Briefly point out its types.",
        "page": 21,
        "bbox": [
          57.0,
          351.867431640625,
          370.9659729003906,
          366.5506286621094
        ],
        "font": {
          "name": "SegoeScript-Bold",
          "size": 11.039999961853027,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• System calls provides an interface to the services of the operating system. These are generally",
        "page": 21,
        "bbox": [
          75.02400207519531,
          390.22998046875,
          555.0640869140625,
          404.8819885253906
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "written in C or C++, although some are written in assembly for optimal performance. • The below figure illustrates the sequence of system calls required to copy a file content from",
        "page": 21,
        "bbox": [
          75.02400207519531,
          407.43798828125,
          554.7238159179688,
          437.5220031738281
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "one file (input file) to another file (output file).",
        "page": 21,
        "bbox": [
          57.0,
          439.9779968261719,
          320.8299865722656,
          468.05462646484375
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "An example to illustrate how system calls are used: writing a simple program to read data from one file and copy them to another file",
        "page": 21,
        "bbox": [
          57.0,
          672.703369140625,
          555.0,
          724.8519897460938
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• There are number of system calls used to finish this task. The first system call is to write a message on the screen (monitor). Then to accept the input filename. Then another system call to write message on the screen, then to accept the output filename.",
        "page": 21,
        "bbox": [
          90.02400207519531,
          737.2439575195312,
          555.052001953125,
          782.3279418945312
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=1024, height=693]",
        "page": 21,
        "bbox": [
          153.92999267578125,
          468.0,
          455.42999267578125,
          682.5
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 22,
        "bbox": [
          395.7099914550781,
          37.5,
          540.6099853515625,
          55.5
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "22 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 22,
        "bbox": [
          85.58399963378906,
          801.09033203125,
          494.83502197265625,
          816.6326293945312
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "• When the program tries to open the input file, it may find that there is no file of that name or that the file is protected against access. In these cases, the program should print a message on the console (another system call) and then terminate abnormally (another system call) and create a new one (another system call).",
        "page": 22,
        "bbox": [
          90.02400207519531,
          74.04798889160156,
          555.0880737304688,
          134.9720001220703
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Now that both the files are opened, we enter a loop that reads from the input file (another system call) and writes to output file (another system call).",
        "page": 22,
        "bbox": [
          90.02400207519531,
          137.52796936035156,
          554.7678833007812,
          166.65199279785156
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Finally, after the entire file is copied, the program may close both files (another system call), write a message to the console or window (system call), and finally terminate normally (final system call).",
        "page": 22,
        "bbox": [
          57.0,
          169.3279571533203,
          554.828125,
          246.0919952392578
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Most programmers do not use the low-level system calls directly, but instead use an \"Application Programming Interface\", API.",
        "page": 22,
        "bbox": [
          90.02400207519531,
          248.64796447753906,
          554.9501342773438,
          277.8019714355469
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Instead of direct system calls provides for greater program portability between different systems. The API then makes the appropriate system calls through the system call interface, using a system call table to access specific numbered system calls.",
        "page": 22,
        "bbox": [
          90.02400207519531,
          280.3580017089844,
          554.8041381835938,
          325.4419860839844
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Each system call has a specific numbered system call. The system call table (consisting of system call number and address of the particular service) invokes a particular service routine for a specific system call.",
        "page": 22,
        "bbox": [
          90.02400207519531,
          327.99798583984375,
          554.743896484375,
          372.9620056152344
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• The caller need know nothing about how the system call is implemented or what it does during execution.",
        "page": 22,
        "bbox": [
          90.02400207519531,
          375.63800048828125,
          554.6720581054688,
          404.7619934082031
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Figure: The handling of a user application invoking the open() system call.",
        "page": 22,
        "bbox": [
          124.81999969482422,
          553.3165283203125,
          487.17999267578125,
          581.1819458007812
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Figure: Passing of parameters as a table.",
        "page": 22,
        "bbox": [
          207.64999389648438,
          742.6334228515625,
          469.8759765625,
          768.407958984375
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=957, height=586]",
        "page": 22,
        "bbox": [
          162.0,
          406.8199462890625,
          447.0,
          567.3199462890625
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=863, height=453]",
        "page": 22,
        "bbox": [
          143.6300048828125,
          609.0150146484375,
          465.3800048828125,
          754.5150146484375
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 23,
        "bbox": [
          395.7099914550781,
          37.5,
          540.6099853515625,
          55.5
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "23 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 23,
        "bbox": [
          85.58399963378906,
          806.4903564453125,
          494.83502197265625,
          822.0326538085938
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "Three general methods used to pass parameters to OS are –",
        "page": 23,
        "bbox": [
          57.0,
          74.16798400878906,
          343.989990234375,
          103.7719955444336
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "i) To pass parameters in registers ii) If parameters are large blocks, address of block (where parameters are stored in memory) is sent to OS in the register. (Linux & Solaris). iii) Parameters can be pushed onto the stack by program and popped off the stack by OS. Types of System Calls The system calls can be categorized into six major categories:",
        "page": 23,
        "bbox": [
          57.0,
          106.15995788574219,
          554.7440185546875,
          259.0519714355469
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "1. Process Control 2. File management 3. Device management 4. Information management 5. Communications 6. Protection",
        "page": 23,
        "bbox": [
          75.02400207519531,
          259.42999267578125,
          235.61000061035156,
          341.8819885253906
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Figure: Types of system calls",
        "page": 23,
        "bbox": [
          234.0500030517578,
          736.2733764648438,
          467.3559875488281,
          772.3679809570312
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=562, height=1044]",
        "page": 23,
        "bbox": [
          147.94000244140625,
          341.8439636230469,
          462.19000244140625,
          748.1339721679688
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 24,
        "bbox": [
          395.7099914550781,
          37.5,
          540.6099853515625,
          55.5
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "24 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 24,
        "bbox": [
          85.58399963378906,
          806.4903564453125,
          494.83502197265625,
          822.0326538085938
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "1. Process Control",
        "page": 24,
        "bbox": [
          57.0,
          74.04798889160156,
          153.6199951171875,
          103.49259948730469
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 12.0,
          "flags": 20,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Process control system calls include end, abort, load, execute, create process, terminate process, get/set process attributes, wait for time or event, signal event, and allocate and free memory.",
        "page": 24,
        "bbox": [
          90.02400207519531,
          103.92799377441406,
          555.0999755859375,
          149.01197814941406
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Processes must be created, launched, monitored, paused, resumed, and eventually stopped.",
        "page": 24,
        "bbox": [
          90.02400207519531,
          151.56800842285156,
          546.3400268554688,
          164.8520050048828
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• When one process pauses or stops, then another must be launched or resumed",
        "page": 24,
        "bbox": [
          90.02400207519531,
          167.40797424316406,
          483.82000732421875,
          180.6919708251953
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Process attributes like process priority, max. allowable execution time etc. are set and retrieved by OS.",
        "page": 24,
        "bbox": [
          90.02400207519531,
          183.2480010986328,
          554.7440185546875,
          212.49195861816406
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• After creating the new process, the parent process may have to wait (wait time), or wait for an event to occur (wait event). The process sends back a signal when the event has occurred (signal event)",
        "page": 24,
        "bbox": [
          90.02400207519531,
          215.04798889160156,
          554.77392578125,
          273.7613525390625
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "2. File Management The file management functions of OS are –",
        "page": 24,
        "bbox": [
          57.0,
          280.4779968261719,
          267.6499938964844,
          325.4419860839844
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 12.0,
          "flags": 20,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• File management system calls include create file, delete file, open, close, read, write, reposition, get file attributes, and set file attributes.",
        "page": 24,
        "bbox": [
          90.02400207519531,
          327.99798583984375,
          554.803955078125,
          357.1219787597656
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• After creating a file, the file is opened . Data is read or written to a file.",
        "page": 24,
        "bbox": [
          90.02400207519531,
          359.7980041503906,
          461.0199890136719,
          373.0820007324219
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• The file pointer may need to be repositioned to a point.",
        "page": 24,
        "bbox": [
          90.02400207519531,
          375.63800048828125,
          379.1499938964844,
          388.9219970703125
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• The file attributes like filename, file type, permissions, etc. are set and retrieved using system calls.",
        "page": 24,
        "bbox": [
          90.02400207519531,
          391.4779968261719,
          554.8460693359375,
          420.60198974609375
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• These operations may also be supported for directories as well as ordinary files.",
        "page": 24,
        "bbox": [
          90.02400207519531,
          423.2779846191406,
          493.29998779296875,
          436.5619812011719
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "3. Device Management",
        "page": 24,
        "bbox": [
          57.0,
          463.9779968261719,
          176.3000030517578,
          477.2619934082031
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 12.0,
          "flags": 20,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Device management system calls include request device , release device, read , write , reposition , get/set device attributes, and logically attach or detach devices.",
        "page": 24,
        "bbox": [
          90.02400207519531,
          495.6579895019531,
          526.6599731445312,
          524.9019775390625
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• When a process needs a resource, a request for resource is done. Then the control is granted to the process. If requested resource is already attached to some other process, the requesting process has to wait.",
        "page": 24,
        "bbox": [
          90.02400207519531,
          527.4580078125,
          526.1121215820312,
          572.4219360351562
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• In multiprogramming systems, after a process uses the device, it has to be returned to OS, so that another process can use the device.",
        "page": 24,
        "bbox": [
          90.02400207519531,
          575.0979614257812,
          526.0759887695312,
          604.2219848632812
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Devices may be physical (e.g. disk drives ), or virtual / abstract ( e.g. files, partitions, and RAM disks ).",
        "page": 24,
        "bbox": [
          57.0,
          606.7779541015625,
          526.4199829101562,
          652.011962890625
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "4. Information Maintenance",
        "page": 24,
        "bbox": [
          57.0,
          659.1279296875,
          204.2899932861328,
          672.4119262695312
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 12.0,
          "flags": 20,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Information maintenance system calls include calls to get/set the time, date, system data, and process, file, or device attributes.",
        "page": 24,
        "bbox": [
          90.02400207519531,
          674.8479614257812,
          554.8040161132812,
          704.0919799804688
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• These system calls care used to transfer the information between user and the OS. Information like current time & date, no. of current users, version no. of OS, amount of free memory, disk space etc. are passed from OS to the user.",
        "page": 24,
        "bbox": [
          57.0,
          706.64794921875,
          554.7800903320312,
          783.887939453125
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 25,
        "bbox": [
          395.7099914550781,
          37.5,
          540.6099853515625,
          55.5
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "25 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 25,
        "bbox": [
          85.58399963378906,
          806.4903564453125,
          494.83502197265625,
          822.0326538085938
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "5. Communication",
        "page": 25,
        "bbox": [
          57.0,
          74.16798400878906,
          154.6999969482422,
          87.45198822021484
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 12.0,
          "flags": 20,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Communication system calls create/delete communication connection, send/receive messages, transfer status information, and attach/detach remote devices.",
        "page": 25,
        "bbox": [
          90.02400207519531,
          89.88795471191406,
          554.803955078125,
          119.1319808959961
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• The message passing model must support calls to:",
        "page": 25,
        "bbox": [
          90.02400207519531,
          121.68800354003906,
          354.7900085449219,
          134.9720001220703
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "o Identify a remote process and/or host with which to communicate.",
        "page": 25,
        "bbox": [
          126.0199966430664,
          137.52796936035156,
          464.739990234375,
          150.8119659423828
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "o Establish a connection between the two processes.",
        "page": 25,
        "bbox": [
          126.0199966430664,
          153.3679962158203,
          388.6300048828125,
          166.65199279785156
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "o Open and close the connection as needed.",
        "page": 25,
        "bbox": [
          126.0199966430664,
          169.3279571533203,
          347.2300109863281,
          182.61195373535156
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "o Transmit messages along the connection.",
        "page": 25,
        "bbox": [
          126.0199966430664,
          189.7279815673828,
          344.7099914550781,
          203.01197814941406
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "o Wait for incoming messages, in either a blocking or non-blocking state.",
        "page": 25,
        "bbox": [
          126.0199966430664,
          205.56800842285156,
          490.5400085449219,
          218.8520050048828
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "o Delete the connection when no longer needed.",
        "page": 25,
        "bbox": [
          126.0199966430664,
          221.40797424316406,
          369.19000244140625,
          234.6919708251953
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• The shared memory model must support calls to:",
        "page": 25,
        "bbox": [
          90.02400207519531,
          237.2480010986328,
          352.1499938964844,
          250.53199768066406
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "o Create and access memory that is shared amongst processes (and threads. )",
        "page": 25,
        "bbox": [
          126.0199966430664,
          253.1179962158203,
          506.1400146484375,
          266.4020080566406
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "o Free up shared memory and/or dynamically allocate it as needed.",
        "page": 25,
        "bbox": [
          126.0199966430664,
          269.0779724121094,
          459.1000061035156,
          282.3619689941406
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Message passing is simpler and easier, (particularly for inter-computer communications), and is generally appropriate for small amounts of data. It is easy to implement, but there are system calls for each read and write process.",
        "page": 25,
        "bbox": [
          90.02400207519531,
          284.9179992675781,
          555.0999755859375,
          329.8819885253906
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Shared memory is faster, and is generally the better approach where large amounts of data are to be shared. This model is difficult to implement, and it consists of only few system calls. 6. Protection",
        "page": 25,
        "bbox": [
          57.0,
          332.43798828125,
          555.0999755859375,
          409.5619812011719
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "• Protection provides mechanisms for controlling which users / processes have access to which system resources. • System calls allow the access mechanisms to be adjusted as needed, and for non- privileged users to be granted elevated access permissions under carefully controlled temporary circumstances. System Programs Q) List and explain the different categories of system program? A collection of programs that provide a convenient environment for program development and execution (other than OS) are called system programs or system utilities. System programs may be divided into five categories:",
        "page": 25,
        "bbox": [
          57.0,
          411.99798583984375,
          555.0999755859375,
          650.4519653320312
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "1. File management - programs to create, delete, copy, rename, print, list, and generally",
        "page": 25,
        "bbox": [
          75.02400207519531,
          652.9599609375,
          555.2179565429688,
          666.4119262695312
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "manipulate files and directories. 2. Status information - Utilities to check on the date, time, number of users, processes running,",
        "page": 25,
        "bbox": [
          75.02400207519531,
          668.9679565429688,
          555.2539672851562,
          698.0919799804688
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "data logging, etc. System registries are used to store and recall configuration information for particular applications. 3. File modification - e.g. text editors and other tools which can change file contents. 4. Programming-language support - E.g. Compilers, linkers, debuggers, profilers, assemblers,",
        "page": 25,
        "bbox": [
          75.02400207519531,
          700.64794921875,
          555.3939819335938,
          761.5679321289062
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "library archive management, interpreters for common languages, and support for make.",
        "page": 25,
        "bbox": [
          93.02400207519531,
          764.1239624023438,
          515.6199951171875,
          777.407958984375
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 26,
        "bbox": [
          395.7099914550781,
          37.5,
          540.6099853515625,
          55.5
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "26 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 26,
        "bbox": [
          85.58399963378906,
          806.4903564453125,
          494.83502197265625,
          822.0326538085938
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "5. Program loading and execution - loaders, dynamic loaders, overlay loaders, etc., as well as",
        "page": 26,
        "bbox": [
          75.02400207519531,
          73.87998962402344,
          555.26611328125,
          87.33199310302734
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "interactive debuggers. 6. Communications - Programs for providing connectivity between processes and users,",
        "page": 26,
        "bbox": [
          75.02400207519531,
          89.88795471191406,
          555.2780151367188,
          119.1319808959961
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "including mail, web browsers, remote logins, file transfers, and remote command execution.",
        "page": 26,
        "bbox": [
          93.02400207519531,
          121.68800354003906,
          538.5399780273438,
          134.9720001220703
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "Operating-System Design and Implementation Design Goals",
        "page": 26,
        "bbox": [
          56.036094665527344,
          142.0879669189453,
          338.7400207519531,
          201.63198852539062
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "• The first problem in designing a system is to define goals and specifications. At the highest",
        "page": 26,
        "bbox": [
          75.02400207519531,
          207.67999267578125,
          554.8079833984375,
          222.3319854736328
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "level, the design of the system will be affected by the choice of hardware and the type of system: batch, time shared, single user, multiuser, distributed, real time, or general purpose. • Beyond this highest design level, the requirements may be much harder to specify. The",
        "page": 26,
        "bbox": [
          75.02400207519531,
          224.76795959472656,
          554.8201293945312,
          270.8420104980469
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "requirements can, however, be divided into two basic groups",
        "page": 26,
        "bbox": [
          93.02400207519531,
          273.2779846191406,
          387.9100036621094,
          286.5619812011719
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "1. User goals (User requirements) 2. System goals (system requirements)",
        "page": 26,
        "bbox": [
          57.0,
          288.95001220703125,
          323.8299865722656,
          334.2019958496094
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• User requirements are the features that user care about and understand like system should be",
        "page": 26,
        "bbox": [
          75.02400207519531,
          336.3499755859375,
          554.926025390625,
          351.0019836425781
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "convenient to use, easy to learn, reliable, safe and fast. • System requirements are written for the developers, ie. People who design the OS. Their",
        "page": 26,
        "bbox": [
          75.02400207519531,
          353.5579833984375,
          554.81005859375,
          383.6419982910156
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "requirements are like easy to design, implement and maintain, flexible, reliable, error free and efficient. Mechanisms and Policies",
        "page": 26,
        "bbox": [
          56.036094665527344,
          386.197998046875,
          555.0999755859375,
          445.52197265625
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Policies determine what is to be done. Mechanisms determine how it is to be implemented. • Example: in timer- counter and decrementing counter is the mechanism and deciding how long",
        "page": 26,
        "bbox": [
          75.02400207519531,
          451.5699768066406,
          554.8580322265625,
          482.9020080566406
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "the time has to be set is the policies. • Policies change overtime. In the worst case, each change in policy would require a change in",
        "page": 26,
        "bbox": [
          75.02400207519531,
          485.4580078125,
          554.7120361328125,
          515.5419311523438
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "the underlying mechanism. • If properly separated and implemented, policy changes can be easily adjusted without re-",
        "page": 26,
        "bbox": [
          75.02400207519531,
          517.9779663085938,
          555.0999755859375,
          548.1819458007812
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "writing the code, just by adjusting parameters or possibly loading new data / configuration files. Implementation",
        "page": 26,
        "bbox": [
          56.036094665527344,
          550.6179809570312,
          555.0999755859375,
          611.9619750976562
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Traditionally OS were written in assembly language. • In recent years, OS are written in C, or C++. Critical sections of code are still written in",
        "page": 26,
        "bbox": [
          75.02400207519531,
          617.9199829101562,
          516.77001953125,
          649.3719482421875
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "assembly language. • The first OS that was not written in assembly language, it was the Master Control",
        "page": 26,
        "bbox": [
          75.02400207519531,
          651.8079833984375,
          487.60601806640625,
          681.8919677734375
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Program (MCP). • The advantages of using a higher-level language for implementing operating systems are:",
        "page": 26,
        "bbox": [
          75.02400207519531,
          684.447998046875,
          526.4420166015625,
          714.531982421875
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "The code can be written faster, more compact, easy to port to other systems and is easier to understand and debug. • The only disadvantages of implementing an operating system in a higher-level language",
        "page": 26,
        "bbox": [
          75.02400207519531,
          716.9679565429688,
          526.5159912109375,
          763.0079956054688
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "are reduced speed and increased storage requirements.",
        "page": 26,
        "bbox": [
          93.02400207519531,
          765.4439697265625,
          356.8299865722656,
          778.7279663085938
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 27,
        "bbox": [
          395.7099914550781,
          10.5,
          540.6099853515625,
          28.5
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "27 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 27,
        "bbox": [
          85.58399963378906,
          806.4903564453125,
          494.83502197265625,
          822.0326538085938
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "heading",
        "content": "Operating-System Structure Simple Structure",
        "page": 27,
        "bbox": [
          56.036094665527344,
          47.130313873291016,
          230.47999572753906,
          92.67196655273438
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "• Many operating systems do not have well-defined structures. They started as small, simple, and",
        "page": 27,
        "bbox": [
          75.02400207519531,
          103.8800048828125,
          554.9420166015625,
          118.5320053100586
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "limited systems and then grew beyond their original scope. Eg: MS-DOS. • In MS-DOS, the interfaces and levels of functionality are not well separated. Application",
        "page": 27,
        "bbox": [
          75.02400207519531,
          120.96797180175781,
          555.0759887695312,
          151.1719512939453
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "programs can access basic I/O routines to write directly to the display and disk drives. Such freedom leaves MS-DOS in bad state and the entire system can crash down when user programs fail. • UNIX OS consists of two separable parts: the kernel and the system programs. The kernel is",
        "page": 27,
        "bbox": [
          75.02400207519531,
          153.6079864501953,
          554.9381103515625,
          215.49195861816406
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "further separated into a series of interfaces and device drivers. The kernel provides the file system, CPU scheduling, memory management, and other operating-system functions through system calls.",
        "page": 27,
        "bbox": [
          57.0,
          217.92799377441406,
          555.0219116210938,
          279.0019836425781
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Figure: MS-DOS layer structure. Layered Approach",
        "page": 27,
        "bbox": [
          56.036094665527344,
          451.25799560546875,
          386.4700012207031,
          494.72198486328125
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• The OS is broken into number of layers (levels). Each layer rests on the layer below it, and",
        "page": 27,
        "bbox": [
          75.02400207519531,
          517.2100219726562,
          554.7000122070312,
          531.8619995117188
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "relies on the services provided by the next lower layer. • Bottom layer (layer 0) is the hardware and the topmost layer is the user interface. • A typical layer, consists of data structure and routines that can be invoked by higher-level",
        "page": 27,
        "bbox": [
          75.02400207519531,
          534.2979736328125,
          555.0880126953125,
          581.1819458007812
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "layer. • Advantage of layered approach is simplicity of construction and debugging. • The layers are selected so that each uses functions and services of only lower-level layers. So",
        "page": 27,
        "bbox": [
          75.02400207519531,
          583.6179809570312,
          555.0280151367188,
          630.531982421875
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "simplifies debugging and system verification. The layers are debugged one by one from the lowest and if any layer doesn’t work, then error is due to that layer only, as the lower layers are already debugged. Thus, the design and implementation are simplified. • A layer need not know how its lower-level layers are implemented. Thus hides the operations",
        "page": 27,
        "bbox": [
          75.02400207519531,
          632.9679565429688,
          554.9180908203125,
          694.8519897460938
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "from higher layers.",
        "page": 27,
        "bbox": [
          93.02400207519531,
          697.2879638671875,
          187.6999969482422,
          710.5719604492188
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=503, height=484]",
        "page": 27,
        "bbox": [
          226.1999969482422,
          281.02996826171875,
          384.29998779296875,
          432.8299560546875
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 28,
        "bbox": [
          395.7099914550781,
          10.5,
          540.6099853515625,
          28.5
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "28 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 28,
        "bbox": [
          85.58399963378906,
          806.4903564453125,
          494.83502197265625,
          822.0326538085938
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "Figure: A layered Operating System Disadvantages of layered approach:",
        "page": 28,
        "bbox": [
          57.0,
          239.52796936035156,
          400.510009765625,
          268.8019714355469
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 12.0,
          "flags": 20,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• The various layers must be appropriately defined, as a layer can use only lower-level layers. • Less efficient than other types, because any interaction with layer 0 required from top layer.",
        "page": 28,
        "bbox": [
          75.02400207519531,
          270.95001220703125,
          554.843994140625,
          302.4020080566406
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "The system call should pass through all the layers and finally to layer 0. This is an overhead. Microkernels",
        "page": 28,
        "bbox": [
          56.036094665527344,
          304.8379821777344,
          540.3400268554688,
          352.2619934082031
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• This method structures the operating system by removing all nonessential components from the",
        "page": 28,
        "bbox": [
          75.02400207519531,
          358.30999755859375,
          555.075927734375,
          372.9620056152344
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "kernel and implementing them as system and user-level programs thus making the kernel as small and efficient as possible. • The removed services are implemented as system applications. • Most microkernels provide basic process and memory management, and message passing",
        "page": 28,
        "bbox": [
          75.02400207519531,
          375.51800537109375,
          555.0100708007812,
          438.1219787597656
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "between other services. • The main function of the microkernel is to provide a communication facility between the client",
        "page": 28,
        "bbox": [
          75.02400207519531,
          440.697998046875,
          555.0159912109375,
          470.781982421875
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "program and the various services that are also running in user space.",
        "page": 28,
        "bbox": [
          93.02400207519531,
          473.2179870605469,
          424.0299987792969,
          502.4620056152344
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Benefit of microkernel –",
        "page": 28,
        "bbox": [
          57.0,
          646.887939453125,
          493.5400085449219,
          689.3319702148438
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• System expansion can also be easier, because it only involves adding more system",
        "page": 28,
        "bbox": [
          75.02400207519531,
          691.47998046875,
          554.7481079101562,
          706.1319580078125
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "applications, not rebuilding a new kernel. • Mach was the first and most widely known microkernel, and now forms a major component of",
        "page": 28,
        "bbox": [
          75.02400207519531,
          708.68798828125,
          554.760009765625,
          738.77197265625
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Mac OSX. Disadvantage of Microkernel -",
        "page": 28,
        "bbox": [
          57.0,
          741.323974609375,
          213.64999389648438,
          770.4479370117188
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Performance overhead of user space to kernel space communication",
        "page": 28,
        "bbox": [
          75.02400207519531,
          772.5960083007812,
          422.7099914550781,
          787.2479858398438
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=569, height=534]",
        "page": 28,
        "bbox": [
          212.10000610351562,
          46.529998779296875,
          398.4000244140625,
          221.1300048828125
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "footnote",
        "content": "Application",
        "page": 28,
        "bbox": [
          179.94154357910156,
          513.4782104492188,
          215.103759765625,
          521.0308837890625
        ],
        "font": {
          "name": "ArialMT",
          "size": 6.981194496154785,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "footnote",
        "content": "Program",
        "page": 28,
        "bbox": [
          183.74807739257812,
          521.608642578125,
          211.32666015625,
          529.1613159179688
        ],
        "font": {
          "name": "ArialMT",
          "size": 6.981194496154785,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "footnote",
        "content": "File System",
        "page": 28,
        "bbox": [
          290.1959533691406,
          513.4782104492188,
          314.15545654296875,
          529.1613159179688
        ],
        "font": {
          "name": "ArialMT",
          "size": 6.981194496154785,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "footnote",
        "content": "Device",
        "page": 28,
        "bbox": [
          390.3599853515625,
          513.4782104492188,
          412.31927490234375,
          521.0308837890625
        ],
        "font": {
          "name": "ArialMT",
          "size": 6.981194496154785,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "footnote",
        "content": "Driver",
        "page": 28,
        "bbox": [
          391.762451171875,
          521.608642578125,
          410.9228820800781,
          529.1613159179688
        ],
        "font": {
          "name": "ArialMT",
          "size": 6.981194496154785,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "footnote",
        "content": "Interprocess Communication",
        "page": 28,
        "bbox": [
          175.0572967529297,
          582.5787963867188,
          224.9837646484375,
          598.2645874023438
        ],
        "font": {
          "name": "ArialMT",
          "size": 6.981194496154785,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "footnote",
        "content": "memory managment",
        "page": 28,
        "bbox": [
          285.70111083984375,
          580.3858642578125,
          323.6622009277344,
          596.0716552734375
        ],
        "font": {
          "name": "ArialMT",
          "size": 6.981194496154785,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "footnote",
        "content": "CPU scheduling",
        "page": 28,
        "bbox": [
          381.41339111328125,
          580.3858642578125,
          415.7841796875,
          596.0716552734375
        ],
        "font": {
          "name": "ArialMT",
          "size": 6.981194496154785,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "footnote",
        "content": "messages messages",
        "page": 28,
        "bbox": [
          238.1690216064453,
          561.0859375,
          365.5901794433594,
          566.4742431640625
        ],
        "font": {
          "name": "ArialMT",
          "size": 4.98057222366333,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "footnote",
        "content": "microkernel",
        "page": 28,
        "bbox": [
          286.1006164550781,
          615.1817016601562,
          323.255859375,
          622.734375
        ],
        "font": {
          "name": "ArialMT",
          "size": 6.981194496154785,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "footnote",
        "content": "hardware",
        "page": 28,
        "bbox": [
          289.7001953125,
          643.3336791992188,
          319.6891784667969,
          650.8863525390625
        ],
        "font": {
          "name": "ArialMT",
          "size": 6.981194496154785,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "footnote",
        "content": "user mode",
        "page": 28,
        "bbox": [
          470.00836181640625,
          513.4782104492188,
          488.0032043457031,
          529.1613159179688
        ],
        "font": {
          "name": "ArialMT",
          "size": 6.981194496154785,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "footnote",
        "content": "kernel mode",
        "page": 28,
        "bbox": [
          471.0113525390625,
          582.5787963867188,
          490.6034851074219,
          598.2645874023438
        ],
        "font": {
          "name": "ArialMT",
          "size": 6.981194496154785,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 29,
        "bbox": [
          395.7099914550781,
          10.5,
          540.6099853515625,
          28.5
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "29 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 29,
        "bbox": [
          85.58399963378906,
          806.4903564453125,
          494.83502197265625,
          822.0326538085938
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "Modules",
        "page": 29,
        "bbox": [
          56.036094665527344,
          46.81200408935547,
          119.45556640625,
          62.772003173828125
        ],
        "font": {
          "name": "SegoeScript-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Modern OS development is object-oriented, with a relatively small core kernel and a set of",
        "page": 29,
        "bbox": [
          75.02400207519531,
          84.67999267578125,
          554.9420166015625,
          99.33199310302734
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "modules which can be linked in dynamically. • Modules are similar to layers in that each subsystem has clearly defined tasks and interfaces,",
        "page": 29,
        "bbox": [
          75.02400207519531,
          101.76795959472656,
          554.6640014648438,
          131.8520050048828
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldItalicMT",
          "size": 12.0,
          "flags": 22,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "but any module is free to contact any other module, eliminating the problems of going through multiple intermediary layers. • The kernel is relatively small in this architecture, similar to microkernels, but the kernel does",
        "page": 29,
        "bbox": [
          75.02400207519531,
          134.40797424316406,
          554.8819580078125,
          180.3319854736328
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "not have to implement message passing since modules are free to contact each other directly. Eg: Solaris, Linux and MacOSX.",
        "page": 29,
        "bbox": [
          57.0,
          182.88795471191406,
          554.9739990234375,
          227.8520050048828
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Figure: Solaris loadable modules",
        "page": 29,
        "bbox": [
          57.0,
          384.39801025390625,
          386.7099914550781,
          413.5220031738281
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• The Max OSX architecture relies on the Mach microkernel for basic system management",
        "page": 29,
        "bbox": [
          75.02400207519531,
          415.66998291015625,
          554.7479858398438,
          430.3219909667969
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "services, and the BSD kernel for additional services. Application services and dynamically loadable modules (kernel extensions ) provide the rest of the OS functionality. • Resembles layered system, but a module can call any other module. • Resembles microkernel, the primary module has only core functions and the knowledge of how",
        "page": 29,
        "bbox": [
          75.02400207519531,
          432.89801025390625,
          555.0640869140625,
          495.6219787597656
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "to load and communicate with other modules. Virtual Machines",
        "page": 29,
        "bbox": [
          57.0,
          498.0579833984375,
          315.54998779296875,
          575.0619506835938
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "Q) Demonstrate the concept of virtual machine with an example",
        "page": 29,
        "bbox": [
          57.0,
          577.367431640625,
          447.07598876953125,
          592.0506591796875
        ],
        "font": {
          "name": "SegoeScript-Bold",
          "size": 11.039999961853027,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• The fundamental idea behind a virtual machine is to abstract the hardware of a single computer",
        "page": 29,
        "bbox": [
          75.02400207519531,
          599.8899536132812,
          554.77197265625,
          614.5419311523438
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "(the CPU, memory, disk drives, network interface cards, and so forth) into several different execution environments, thereby creating the illusion that each separate execution environment is running its own private computer. • Creates an illusion that a process has its own processor with its own memory. • Host OS is the main OS installed in system and the other OS installed in the system are called",
        "page": 29,
        "bbox": [
          75.02400207519531,
          617.1279296875,
          554.9859619140625,
          695.6919555664062
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "guest OS.",
        "page": 29,
        "bbox": [
          57.0,
          698.1279296875,
          142.6999969482422,
          727.8519897460938
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=803, height=415]",
        "page": 29,
        "bbox": [
          174.0,
          229.95999145507812,
          436.5,
          365.55999755859375
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 30,
        "bbox": [
          395.7099914550781,
          15.05999755859375,
          540.6099853515625,
          33.05999755859375
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "30 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 30,
        "bbox": [
          85.58399963378906,
          794.850341796875,
          494.83502197265625,
          810.3926391601562
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "Figure: System modes. (A) Non-virtual machine (b) Virtual machine Virtual machines first appeared as the VM Operating System for IBM mainframes in 1972. Implementation",
        "page": 30,
        "bbox": [
          56.036094665527344,
          261.7580261230469,
          497.9800109863281,
          340.2619934082031
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 12.0,
          "flags": 20,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• The virtual-machine concept is useful, it is difficult to implement. • Work is required to provide an exact duplicate of the underlying machine. Remember that the",
        "page": 30,
        "bbox": [
          75.02400207519531,
          346.30999755859375,
          554.8439331054688,
          377.6419982910156
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "underlying machine has two modes: user mode and kernel mode. • The virtual-machine software can run in kernel mode, since it is the operating system. The",
        "page": 30,
        "bbox": [
          75.02400207519531,
          380.197998046875,
          554.8820190429688,
          410.281982421875
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "virtual machine itself can execute in only user mode.",
        "page": 30,
        "bbox": [
          57.0,
          412.7179870605469,
          349.6300048828125,
          441.84197998046875
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Benefits",
        "page": 30,
        "bbox": [
          56.036094665527344,
          444.3219909667969,
          116.81556701660156,
          460.281982421875
        ],
        "font": {
          "name": "SegoeScript-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Able to share the same hardware and run several different execution environments (OS). • Host system is protected from the virtual machines and the virtual machines are protected from",
        "page": 30,
        "bbox": [
          75.02400207519531,
          466.2099914550781,
          554.85791015625,
          497.6619873046875
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "one another. A virus in guest OS, will corrupt that OS but will not affect the other guest systems and host systems. • Even though the virtual machines are separated from one another, software resources can be",
        "page": 30,
        "bbox": [
          75.02400207519531,
          500.0979919433594,
          555.0760498046875,
          546.1419677734375
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "shared among them. Two ways of sharing s/w resource for communication are:",
        "page": 30,
        "bbox": [
          93.02400207519531,
          548.5780029296875,
          479.0199890136719,
          561.8619995117188
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "o To share a file system volume (part of memory). o To develop a virtual communication network to communicate between the virtual",
        "page": 30,
        "bbox": [
          111.0199966430664,
          564.25,
          555.0999755859375,
          593.6619262695312
        ],
        "font": {
          "name": "CourierNewPSMT",
          "size": 12.0,
          "flags": 12,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "machines. • The operating system runs on and controls the entire machine. Therefore, the current system",
        "page": 30,
        "bbox": [
          75.02400207519531,
          596.2179565429688,
          554.8461303710938,
          626.3319702148438
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "must be stopped and taken out of use while changes are made and tested. This period is commonly called system development time. In virtual machines such problem is eliminated. User programs are executed in one virtual machine and system development is done in another environment. • Multiple OS can be running on the developer’s system concurrently . This helps in rapid",
        "page": 30,
        "bbox": [
          75.02400207519531,
          628.7679443359375,
          555.0999755859375,
          706.491943359375
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "porting and testing of programmer’s code in different environments. • System consolidation – two or more systems are made to run in a single system.",
        "page": 30,
        "bbox": [
          57.0,
          709.0479736328125,
          484.4200134277344,
          786.64794921875
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=704, height=502]",
        "page": 30,
        "bbox": [
          148.8800048828125,
          51.029998779296875,
          460.1100158691406,
          272.3800048828125
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 31,
        "bbox": [
          395.7099914550781,
          15.05999755859375,
          540.6099853515625,
          33.05999755859375
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "31 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 31,
        "bbox": [
          85.58399963378906,
          794.850341796875,
          494.83502197265625,
          810.3926391601562
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "Simulation – Here the host system has one system architecture and the guest system is compiled in different architecture. The compiled guest system programs can be run in an emulator that translates each instructions of guest program into native instructions set of host system. Para-Virtualization – This presents the guest with a system that is similar but not identical to the guest’s preferred system. The guest must be modified to run on the para-virtualized hardware. Examples",
        "page": 31,
        "bbox": [
          56.036094665527344,
          51.58796691894531,
          554.72412109375,
          226.83200073242188
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 12.0,
          "flags": 20,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "VMware",
        "page": 31,
        "bbox": [
          71.90399932861328,
          233.11997985839844,
          123.37999725341797,
          246.5719757080078
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 12.0,
          "flags": 20,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• VMware is a popular commercial application that abstracts Intel 80X86 hardware into isolated",
        "page": 31,
        "bbox": [
          75.02400207519531,
          251.75,
          554.8939819335938,
          266.4020080566406
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "virtual machines. The virtualization tool runs in the user-layer on top of the host OS. The virtual machines running in this tool believe they are running on bare hardware, but the fact is that it is running inside a user-level application. • VMware runs as an application on a host operating system such as Windows or Linux and",
        "page": 31,
        "bbox": [
          75.02400207519531,
          268.8379821777344,
          555.0760498046875,
          330.7220153808594
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "allows this host system to concurrently run several different guest operating systems as independent virtual machines.",
        "page": 31,
        "bbox": [
          93.02400207519531,
          333.2779846191406,
          555.0880737304688,
          362.4020080566406
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "In below scenario, Linux is running as the host operating system; FreeBSD, Windows NT, and Windows XP are running as guest operating systems. The virtualization layer is the heart of VMware, as it abstracts the physical hardware into isolated virtual machines running as guest operating systems. Each virtual machine has its own virtual CPU, memory, disk drives, network interfaces, and so forth.",
        "page": 31,
        "bbox": [
          57.0,
          367.9580078125,
          554.9141235351562,
          428.8819885253906
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Figure: VMware architecture",
        "page": 31,
        "bbox": [
          57.0,
          672.8079833984375,
          517.5399780273438,
          779.3279418945312
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 12.0,
          "flags": 20,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=686, height=508]",
        "page": 31,
        "bbox": [
          130.52000427246094,
          441.07000732421875,
          514.4199829101562,
          683.2999877929688
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 32,
        "bbox": [
          395.7099914550781,
          15.05999755859375,
          540.6099853515625,
          33.05999755859375
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "32 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 32,
        "bbox": [
          85.58399963378906,
          794.850341796875,
          494.83502197265625,
          810.3926391601562
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "The Java Virtual Machine",
        "page": 32,
        "bbox": [
          57.0,
          51.46797180175781,
          191.08999633789062,
          64.7519760131836
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldItalicMT",
          "size": 12.0,
          "flags": 22,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Java was designed from the beginning to be platform independent, by running Java only on a",
        "page": 32,
        "bbox": [
          75.02400207519531,
          66.89996337890625,
          554.9739990234375,
          81.55196380615234
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Java Virtual Machine, JVM, of which different implementations have been developed for numerous different underlying HW platforms. • Java source code is compiled into Java byte code in .class files. Java byte code is binary",
        "page": 32,
        "bbox": [
          75.02400207519531,
          84.12800598144531,
          555.0759887695312,
          130.0519561767578
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "instructions that will run on the JVM. • The JVM implements memory management and garbage collection. • JVM consists of class loader and Java Interpreter. Class loader loads compiled .class files from",
        "page": 32,
        "bbox": [
          75.02400207519531,
          132.6079864501953,
          554.9859619140625,
          179.37196350097656
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "both Java program and Java API for the execution of Java interpreter. Then it checks the .class file for validity.",
        "page": 32,
        "bbox": [
          93.02400207519531,
          181.92799377441406,
          554.9500732421875,
          211.0519561767578
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Figure: The JVM",
        "page": 32,
        "bbox": [
          172.5800018310547,
          335.510009765625,
          472.5400085449219,
          363.60198974609375
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 12.0,
          "flags": 20,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating System Generation",
        "page": 32,
        "bbox": [
          57.0,
          376.4779968261719,
          213.41000366210938,
          389.7619934082031
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 12.0,
          "flags": 20,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Operating systems are designed to run on any of a class of machines; the system must be",
        "page": 32,
        "bbox": [
          75.02400207519531,
          392.1499938964844,
          554.7001342773438,
          406.802001953125
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "configured for each specific computer site. • SYSGEN program obtains information concerning the specific configuration of the hardware",
        "page": 32,
        "bbox": [
          75.02400207519531,
          409.2380065917969,
          554.77197265625,
          439.3219909667969
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "system.",
        "page": 32,
        "bbox": [
          93.02400207519531,
          441.89801025390625,
          132.3800048828125,
          455.1820068359375
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Booting – starting a computer by loading the kernel. • Bootstrap program – code stored in ROM that is able to locate the kernel, load it into",
        "page": 32,
        "bbox": [
          106.58000183105469,
          457.3299865722656,
          555.0159912109375,
          488.781982421875
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "memory, and start its execution. System Boot",
        "page": 32,
        "bbox": [
          57.0,
          491.2179870605469,
          281.57000732421875,
          536.6619262695312
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Operating system must be made available to hardware so hardware can start it. • Small piece of code – bootstrap loader , locates the kernel, loads it into memory, and starts it",
        "page": 32,
        "bbox": [
          75.02400207519531,
          539.5299682617188,
          554.8340454101562,
          570.9819946289062
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Sometimes two-step process where boot block at fixed location loads bootstrap loader. • When power initialized on system, execution starts at a fixed memory location Firmware used",
        "page": 32,
        "bbox": [
          75.02400207519531,
          573.41796875,
          554.7720947265625,
          603.501953125
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "to hold initial boot code",
        "page": 32,
        "bbox": [
          57.0,
          606.0579833984375,
          210.64999389648438,
          669.3519897460938
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=594, height=285]",
        "page": 32,
        "bbox": [
          192.02000427246094,
          213.16000366210938,
          469.07000732421875,
          346.3399963378906
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 33,
        "bbox": [
          395.7099914550781,
          15.05999755859375,
          540.6099853515625,
          33.05999755859375
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "33 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 33,
        "bbox": [
          85.58399963378906,
          794.850341796875,
          494.83502197265625,
          810.3926391601562
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "heading",
        "content": "PROCESS MANAGEMENT Process Concept",
        "page": 33,
        "bbox": [
          57.0,
          51.659645080566406,
          407.8599853515625,
          115.17195892333984
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 15.960000038146973,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "• A process is a program under execution. • Its current activity is indicated by PC (Program Counter) and the contents of the processor's",
        "page": 33,
        "bbox": [
          75.02400207519531,
          117.32000732421875,
          555.3220825195312,
          148.77198791503906
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "registers. The Process",
        "page": 33,
        "bbox": [
          56.036094665527344,
          149.8399658203125,
          140.33555603027344,
          198.63198852539062
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Process memory is divided into four sections as shown in the figure below:",
        "page": 33,
        "bbox": [
          57.0,
          214.92799377441406,
          420.6700134277344,
          228.2119903564453
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• The stack is used to store temporary data such as local variables, function parameters, function",
        "page": 33,
        "bbox": [
          75.02400207519531,
          230.3599853515625,
          554.9620361328125,
          245.01197814941406
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "return values, return address etc. • The heap which is memory that is dynamically allocated during process run time • The data section stores global variables. • The text section comprises the compiled program code. • Note that, there is a free space between the stack and the heap. When the stack is full, it grows",
        "page": 33,
        "bbox": [
          75.02400207519531,
          247.56800842285156,
          554.756103515625,
          327.8420104980469
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "downwards and when the heap is full, it grows upwards.",
        "page": 33,
        "bbox": [
          57.0,
          330.39801025390625,
          365.7099914550781,
          360.0019836425781
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Figure: Process in memory.",
        "page": 33,
        "bbox": [
          57.0,
          518.4580078125,
          373.989990234375,
          561.7420043945312
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Process State",
        "page": 33,
        "bbox": [
          56.036094665527344,
          564.56201171875,
          146.5755615234375,
          580.5220336914062
        ],
        "font": {
          "name": "SegoeScript-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Q) Illustrate with a neat sketch, the process states and process control block. Process State",
        "page": 33,
        "bbox": [
          57.0,
          586.607421875,
          514.7559814453125,
          617.781982421875
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 12.0,
          "flags": 20,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "A Process has 5 states. Each process may be in one of the following states –",
        "page": 33,
        "bbox": [
          57.0,
          628.16796875,
          424.6300048828125,
          655.491943359375
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "1. New - The process is in the stage of being created. 2. Ready - The process has all the resources it needs to run. It is waiting to be assigned to",
        "page": 33,
        "bbox": [
          75.02400207519531,
          655.47998046875,
          525.9559936523438,
          682.7319946289062
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "the processor. 3. Running – Instructions are being executed. 4. Waiting - The process is waiting for some event to occur. For example, the process may",
        "page": 33,
        "bbox": [
          75.02400207519531,
          683.2479858398438,
          526.5999755859375,
          723.77197265625
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "be waiting for keyboard input, disk access request, inter-process messages, a timer to go off, or a child process to finish. 5. Terminated - The process has completed its execution.",
        "page": 33,
        "bbox": [
          57.0,
          724.2879638671875,
          526.5460205078125,
          778.2479858398438
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=333, height=568]",
        "page": 33,
        "bbox": [
          255.5500030517578,
          362.489990234375,
          353.79998779296875,
          528.989990234375
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 34,
        "bbox": [
          395.7099914550781,
          15.05999755859375,
          540.6099853515625,
          33.05999755859375
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "34 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 34,
        "bbox": [
          85.58399963378906,
          794.850341796875,
          494.83502197265625,
          810.3926391601562
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "Figure: Diagram of process state",
        "page": 34,
        "bbox": [
          226.3699951171875,
          189.3919677734375,
          474.5799865722656,
          216.6919708251953
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Process Control Block For each process there is a Process Control Block (PCB), which stores the process-specific information as shown below –",
        "page": 34,
        "bbox": [
          57.0,
          219.031982421875,
          555.4360961914062,
          307.8019714355469
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 12.0,
          "flags": 20,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Process State – The state of the process may be new, ready, running, waiting, and so on. • Program counter – The counter indicates the address of the next instruction to be executed for",
        "page": 34,
        "bbox": [
          75.02400207519531,
          307.78997802734375,
          554.8699951171875,
          337.2019958496094
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "this process. • CPU registers - The registers vary in number and type, depending on the computer",
        "page": 34,
        "bbox": [
          75.02400207519531,
          339.75799560546875,
          554.8580322265625,
          369.84197998046875
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "architecture. They include accumulators, index registers, stack pointers, and general-purpose registers. Along with the program counter, this state information must be saved when an interrupt occurs, to allow the process to be continued correctly afterward. • CPU scheduling information - This information includes a process priority, pointers to",
        "page": 34,
        "bbox": [
          75.02400207519531,
          372.39801025390625,
          555.0880126953125,
          434.1619873046875
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "scheduling queues, and any other scheduling parameters. • Memory-management information – This includes information such as the value of the base",
        "page": 34,
        "bbox": [
          75.02400207519531,
          436.7380065917969,
          554.9859619140625,
          466.8219909667969
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "and limit registers, the page tables, or the segment tables. • Accounting information – This information includes the amount of CPU and real time used,",
        "page": 34,
        "bbox": [
          75.02400207519531,
          469.25799560546875,
          554.89404296875,
          499.4620056152344
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "time limits, account numbers, job or process numbers, and so on. • I/O status information – This information includes the list of I/O devices allocated to the",
        "page": 34,
        "bbox": [
          75.02400207519531,
          502.0179748535156,
          554.833984375,
          532.2219848632812
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "process, a list of open files, and so on. The PCB simply serves as the repository for any information that may vary from process to process.",
        "page": 34,
        "bbox": [
          57.0,
          534.7779541015625,
          540.9400024414062,
          577.7019653320312
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Figure: Process control block (PCB)",
        "page": 34,
        "bbox": [
          217.3699951171875,
          756.468017578125,
          395.1099853515625,
          783.2879638671875
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=702, height=283]",
        "page": 34,
        "bbox": [
          141.17999267578125,
          70.30001831054688,
          468.989990234375,
          202.45001220703125
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=300, height=585]",
        "page": 34,
        "bbox": [
          258.54998779296875,
          596.9199829101562,
          350.79998779296875,
          769.4199829101562
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 35,
        "bbox": [
          395.7099914550781,
          15.05999755859375,
          540.6099853515625,
          33.05999755859375
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "35 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 35,
        "bbox": [
          85.58399963378906,
          794.850341796875,
          494.83502197265625,
          810.3926391601562
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "CPU Switch from Process to Process",
        "page": 35,
        "bbox": [
          57.0,
          51.46797180175781,
          237.64999389648438,
          64.7519760131836
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "Figure: Diagram showing CPU switch from process to process. Process Scheduling",
        "page": 35,
        "bbox": [
          57.0,
          355.9580078125,
          507.1000061035156,
          442.0820007324219
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "Scheduling Queues",
        "page": 35,
        "bbox": [
          56.036094665527344,
          444.9219970703125,
          190.01556396484375,
          460.8819885253906
        ],
        "font": {
          "name": "SegoeScript-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• As processes enter the system, they are put into a job queue, which consists of all processes in",
        "page": 35,
        "bbox": [
          75.02400207519531,
          466.80999755859375,
          554.748046875,
          481.4620056152344
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "the system. • The processes that are residing in main memory and are ready and waiting to execute are kept",
        "page": 35,
        "bbox": [
          75.02400207519531,
          484.01800537109375,
          554.6762084960938,
          514.1019897460938
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "on a list called the ready queue. This queue is generally stored as a linked list. • A ready-queue header contains pointers to the first and final PCBs in the list. Each PCB",
        "page": 35,
        "bbox": [
          75.02400207519531,
          516.657958984375,
          554.7440795898438,
          546.7420043945312
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "includes a pointer field that points to the next PCB in the ready queue. Ready Queue and Various I/O Device Queues",
        "page": 35,
        "bbox": [
          57.0,
          549.177978515625,
          433.3900146484375,
          610.1019897460938
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=1224, height=822]",
        "page": 35,
        "bbox": [
          73.5,
          78.6199951171875,
          503.3999938964844,
          366.6199951171875
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 36,
        "bbox": [
          395.7099914550781,
          15.05999755859375,
          540.6099853515625,
          33.05999755859375
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "36 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 36,
        "bbox": [
          85.58399963378906,
          794.850341796875,
          494.83502197265625,
          810.3926391601562
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "Figure: The ready queue and various I/O device queues",
        "page": 36,
        "bbox": [
          57.0,
          297.7580261230469,
          472.8999938964844,
          340.2019958496094
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 12.0,
          "flags": 20,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• A common representation of process scheduling is a queueing diagram . Each rectangular box",
        "page": 36,
        "bbox": [
          75.02400207519531,
          342.3499755859375,
          555.052001953125,
          357.0019836425781
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "in the diagram represents a queue. Two types of queues are present: the ready queue and a set of device queues. The circles represent the resources that serve the queues, and the arrows indicate the flow of processes in the system. • A new process is initially put in the ready queue. It waits in the ready queue until it is selected",
        "page": 36,
        "bbox": [
          75.02400207519531,
          359.43798828125,
          554.85791015625,
          421.3219909667969
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "for execution and is given the CPU. Once the process is allocated the CPU and is executing, one of several events could occur:",
        "page": 36,
        "bbox": [
          93.02400207519531,
          423.75799560546875,
          554.882080078125,
          453.0220031738281
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• The process could issue an I/O request, and then be placed in an I/O queue. • The process could create a new subprocess and wait for its termination. • The process could be removed forcibly from the CPU, as a result of an interrupt,",
        "page": 36,
        "bbox": [
          129.02000427246094,
          455.16998291015625,
          536.39599609375,
          503.302001953125
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "and be put back in the ready queue. In the first two cases, the process eventually switches from the waiting state to the ready state, and is then put back in the ready queue. A process continues this cycle until it terminates, at which time it is removed from all queues.",
        "page": 36,
        "bbox": [
          57.0,
          505.7380065917969,
          554.8460693359375,
          582.501953125
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Figure: Queueing-diagram representation of process scheduling.",
        "page": 36,
        "bbox": [
          150.13999938964844,
          759.2039794921875,
          469.8999938964844,
          785.68798828125
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=945, height=815]",
        "page": 36,
        "bbox": [
          155.6999969482422,
          51.029998779296875,
          469.79998779296875,
          308.42999267578125
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=876, height=506]",
        "page": 36,
        "bbox": [
          142.1999969482422,
          584.5700073242188,
          466.79998779296875,
          769.8200073242188
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 37,
        "bbox": [
          395.7099914550781,
          15.05999755859375,
          540.6099853515625,
          33.05999755859375
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "37 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 37,
        "bbox": [
          85.58399963378906,
          794.850341796875,
          494.83502197265625,
          810.3926391601562
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "Schedulers",
        "page": 37,
        "bbox": [
          56.036094665527344,
          51.25200653076172,
          136.13555908203125,
          67.21200561523438
        ],
        "font": {
          "name": "SegoeScript-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Schedulers are software which selects an available program to be assigned to CPU.",
        "page": 37,
        "bbox": [
          57.0,
          73.68800354003906,
          458.9800109863281,
          102.81197357177734
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• A long-term scheduler or Job scheduler – selects jobs from the job pool (of secondary",
        "page": 37,
        "bbox": [
          75.02400207519531,
          104.9599609375,
          554.998046875,
          119.6119613647461
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "memory, disk) and loads them into the memory. If more processes are submitted, than that can be executed immediately, such processes will be in secondary memory. It runs infrequently, and can take time to select the next process.",
        "page": 37,
        "bbox": [
          57.0,
          122.16798400878906,
          554.748046875,
          183.0919952392578
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• The short-term scheduler, or CPU Scheduler – selects job from memory and assigns the",
        "page": 37,
        "bbox": [
          75.02400207519531,
          185.239990234375,
          554.998046875,
          199.89198303222656
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "CPU to it. It must select the new process for CPU frequently. • The medium-term scheduler - selects the process in ready queue and reintroduced into the",
        "page": 37,
        "bbox": [
          75.02400207519531,
          202.3279571533203,
          554.8699951171875,
          232.41200256347656
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "memory.",
        "page": 37,
        "bbox": [
          93.02400207519531,
          234.9679718017578,
          138.97999572753906,
          248.25196838378906
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Processes can be described as either:",
        "page": 37,
        "bbox": [
          57.0,
          261.6379699707031,
          236.3300018310547,
          274.9219665527344
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• I/O-bound process – spends more time doing I/O than computations, • CPU-bound process – spends more time doing computations and few I/O operations. An efficient scheduling system will select a good mix of CPU-bound processes and I/O bound processes.",
        "page": 37,
        "bbox": [
          57.0,
          275.26995849609375,
          555.0999755859375,
          350.1619873046875
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• If the scheduler selects more I/O bound process , then I/O queue will be full and ready",
        "page": 37,
        "bbox": [
          90.02400207519531,
          356.8699951171875,
          554.9620361328125,
          371.5220031738281
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "queue will be empty.",
        "page": 37,
        "bbox": [
          108.0199966430664,
          372.5899963378906,
          211.49000549316406,
          387.24200439453125
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• If the scheduler selects more CPU bound process , then ready queue will be full and I/O",
        "page": 37,
        "bbox": [
          90.02400207519531,
          393.9499816894531,
          554.9498901367188,
          408.60198974609375
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "queue will be empty. Time sharing systems employ a medium-term scheduler . It swaps out the process from ready queue and swap in the process to ready queue. When system loads get high, this scheduler will swap one or more processes out of the ready queue for a few seconds, in order to allow smaller faster jobs to finish up quickly and clear the system. Advantages of medium-term scheduler –",
        "page": 37,
        "bbox": [
          57.0,
          409.66998291015625,
          526.5459594726562,
          535.4619750976562
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• To remove process from memory and thus reduce the degree of multiprogramming",
        "page": 37,
        "bbox": [
          90.02400207519531,
          537.6099853515625,
          526.08203125,
          552.261962890625
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "(number of processes in memory). • To make a proper mix of processes (CPU bound and I/O bound)",
        "page": 37,
        "bbox": [
          57.0,
          553.4500122070312,
          419.3500061035156,
          599.1109008789062
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=678, height=322]",
        "page": 37,
        "bbox": [
          144.0,
          601.0499877929688,
          488.1499938964844,
          764.25
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 38,
        "bbox": [
          395.7099914550781,
          15.05999755859375,
          540.6099853515625,
          33.05999755859375
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "38 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 38,
        "bbox": [
          85.58399963378906,
          794.850341796875,
          494.83502197265625,
          810.3926391601562
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "Context switching",
        "page": 38,
        "bbox": [
          56.036094665527344,
          51.25200653076172,
          181.4955596923828,
          67.21200561523438
        ],
        "font": {
          "name": "SegoeScript-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• The task of switching a CPU from one process to another process is called context switching.",
        "page": 38,
        "bbox": [
          75.02400207519531,
          73.27996826171875,
          555.0719604492188,
          87.93196868896484
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Context-switch times are highly dependent on hardware support (Number of CPU registers). • Whenever an interrupt occurs (hardware or software interrupt), the state of the currently",
        "page": 38,
        "bbox": [
          75.02400207519531,
          90.36799621582031,
          555.3999633789062,
          120.57198333740234
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "running process is saved into the PCB and the state of another process is restored from the PCB to the CPU. • Context switch time is an overhead, as the system does not do useful work while switching.",
        "page": 38,
        "bbox": [
          56.036094665527344,
          123.00801086425781,
          555.1920166015625,
          187.23196411132812
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "Operations on Processes Q) Demonstrate the operations of process creation and process termination in UNIX",
        "page": 38,
        "bbox": [
          57.0,
          193.79034423828125,
          551.9559936523438,
          240.2806396484375
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "Process Creation",
        "page": 38,
        "bbox": [
          57.0,
          243.23745727539062,
          157.79600524902344,
          257.920654296875
        ],
        "font": {
          "name": "SegoeScript-Bold",
          "size": 11.039999961853027,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• A process may create several new processes. The creating process is called a parent",
        "page": 38,
        "bbox": [
          75.02400207519531,
          260.75,
          526.7319946289062,
          275.4020080566406
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "process, and the new processes are called the children of that process. Each of these new processes may in turn create other processes. Every process has a unique process ID. • On typical Solaris systems, the process at the top of the tree is the ‘ sched’ process with",
        "page": 38,
        "bbox": [
          75.02400207519531,
          277.9579772949219,
          526.7319946289062,
          323.8819885253906
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "PID of 0. The ‘sched’ process creates several children processes – init , pageout and fsflush . Pageout and fsflush are responsible for managing memory and file systems. The init process with a PID of 1, serves as a parent process for all user processes.",
        "page": 38,
        "bbox": [
          93.02400207519531,
          326.43798828125,
          526.7680053710938,
          371.4020080566406
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "A process will need certain resources (CPU time, memory, files, I/O devices) to accomplish its task. When a process creates a subprocess, the subprocess may be able to obtain its resources in two ways:",
        "page": 38,
        "bbox": [
          57.0,
          634.5455932617188,
          523.5241088867188,
          697.491943359375
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• directly from the operating system • Subprocess may take the resources of the parent process. The resource can be taken from parent in two ways –",
        "page": 38,
        "bbox": [
          90.02400207519531,
          699.6399536132812,
          383.95001220703125,
          746.8079833984375
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "▪ The parent may have to partition its resources among its children ▪ Share the resources among several children.",
        "page": 38,
        "bbox": [
          133.5800018310547,
          749.1959838867188,
          465.82000732421875,
          778.6079711914062
        ],
        "font": {
          "name": "Wingdings-Regular",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=710, height=686]",
        "page": 38,
        "bbox": [
          139.3800048828125,
          377.5,
          471.4800109863281,
          643.2999877929688
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 39,
        "bbox": [
          395.7099914550781,
          15.05999755859375,
          540.6099853515625,
          33.05999755859375
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "39 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 39,
        "bbox": [
          85.58399963378906,
          794.850341796875,
          494.83502197265625,
          810.3926391601562
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "There are two options for the parent process after creating the child:",
        "page": 39,
        "bbox": [
          57.0,
          51.46797180175781,
          386.2300109863281,
          80.95198822021484
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Wait for the child process to terminate and then continue execution. The parent makes a wait()",
        "page": 39,
        "bbox": [
          75.02400207519531,
          83.239990234375,
          555.4479370117188,
          97.8919906616211
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "system call. • Run concurrently with the child, continuing to execute without waiting. Two possibilities for the address space of the child relative to the parent:",
        "page": 39,
        "bbox": [
          57.0,
          100.32795715332031,
          438.7900085449219,
          178.53199768066406
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• The child may be an exact duplicate of the parent, sharing the same program and data",
        "page": 39,
        "bbox": [
          75.02400207519531,
          180.67999267578125,
          526.2839965820312,
          195.3319854736328
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "segments in memory. Each will have their own PCB, including program counter, registers, and PID. This is the behaviour of the fork system call in UNIX. • The child process may have a new program loaded into its address space, with all new",
        "page": 39,
        "bbox": [
          75.02400207519531,
          197.76795959472656,
          526.3919677734375,
          243.8119659423828
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "code and data segments. This is the behaviour of the spawn system calls in Windows.",
        "page": 39,
        "bbox": [
          57.0,
          246.2480010986328,
          507.82000732421875,
          275.5220031738281
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "In UNIX OS, a child process can be created by fork() system call. The fork system call, if successful, returns the PID of the child process to its parents and returns a zero to the child process. If failure, it returns -1 to the parent. Process IDs of current process or its direct parent can be accessed using the getpid( ) and getppid( ) system calls respectively.",
        "page": 39,
        "bbox": [
          57.0,
          600.67333984375,
          526.47998046875,
          692.0919799804688
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "The parent waits for the child process to complete with the wait() system call. When the child process completes, the parent process resumes and completes its execution.",
        "page": 39,
        "bbox": [
          57.0,
          694.64794921875,
          526.248046875,
          739.6119384765625
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=803, height=780]",
        "page": 39,
        "bbox": [
          108.05000305175781,
          282.0599670410156,
          423.04998779296875,
          588.0399780273438
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 40,
        "bbox": [
          395.7099914550781,
          37.5,
          540.6099853515625,
          55.5
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "40 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 40,
        "bbox": [
          85.58399963378906,
          803.850341796875,
          494.83502197265625,
          819.3926391601562
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "In windows the child process is created using the function createprocess( ) . The createprocess( ) returns 1, if the child is created and returns 0, if the child is not created.",
        "page": 40,
        "bbox": [
          57.0,
          183.74563598632812,
          555.0160522460938,
          233.8520050048828
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Process Termination",
        "page": 40,
        "bbox": [
          56.036094665527344,
          238.80799865722656,
          197.84556579589844,
          268.8619689941406
        ],
        "font": {
          "name": "SegoeScript-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• A process terminates when it finishes executing its last statement and asks the operating system",
        "page": 40,
        "bbox": [
          75.02400207519531,
          274.90997314453125,
          554.986083984375,
          289.5619812011719
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "to delete it, by using the exit () system call. All of the resources assigned to the process like memory, open files, and I/O buffers, are deallocated by the operating system. • A process can cause the termination of another process by using appropriate system call. The",
        "page": 40,
        "bbox": [
          75.02400207519531,
          291.9980163574219,
          554.8341064453125,
          338.0419921875
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "parent process can terminate its child processes by knowing of the PID of the child. • A parent may terminate the execution of children for a variety of reasons, such as:",
        "page": 40,
        "bbox": [
          75.02400207519531,
          340.4779968261719,
          497.0199890136719,
          370.5619812011719
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "• The child has exceeded its usage of the resources, it has been allocated. • The task assigned to the child is no longer required. • The parent is exiting, and the operating system terminates all the children. This is called cascading termination . Interprocess Communication Q) What is interprocess communication? Explain types of IPC.",
        "page": 40,
        "bbox": [
          57.0,
          372.7099914550781,
          554.7921142578125,
          509.6106262207031
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "Interprocess Communication- Processes executing may be either co-operative or independent processes.",
        "page": 40,
        "bbox": [
          56.036094665527344,
          517.0419921875,
          513.501953125,
          565.8219604492188
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldItalicMT",
          "size": 12.0,
          "flags": 22,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Independent Processes – processes that cannot affect other processes or be affected by other",
        "page": 40,
        "bbox": [
          75.02400207519531,
          567.969970703125,
          554.8819580078125,
          582.6219482421875
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "processes executing in the system. • Cooperating Processes – processes that can affect other processes or be affected by other",
        "page": 40,
        "bbox": [
          75.02400207519531,
          585.0579833984375,
          554.8819580078125,
          615.261962890625
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "processes executing in the system. Co-operation among processes are allowed for following reasons –",
        "page": 40,
        "bbox": [
          57.0,
          617.7279663085938,
          381.30999755859375,
          678.8919677734375
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Information Sharing - There may be several processes which need to access the same file. So",
        "page": 40,
        "bbox": [
          75.02400207519531,
          681.0399780273438,
          554.8099975585938,
          695.6919555664062
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "the information must be accessible at the same time to all users. • Computation speedup - Often a solution to a problem can be solved faster if the problem can",
        "page": 40,
        "bbox": [
          75.02400207519531,
          696.7599487304688,
          554.7980346679688,
          728.3319702148438
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "be broken down into sub-tasks, which are solved simultaneously (particularly when multiple",
        "page": 40,
        "bbox": [
          93.02400207519531,
          730.7679443359375,
          555.0220336914062,
          744.0519409179688
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=756, height=294]",
        "page": 40,
        "bbox": [
          126.0,
          73.58000183105469,
          431.7900085449219,
          192.6300048828125
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 41,
        "bbox": [
          395.7099914550781,
          37.5,
          540.6099853515625,
          55.5
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "41 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 41,
        "bbox": [
          85.58399963378906,
          803.850341796875,
          494.83502197265625,
          819.3926391601562
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "processors are involved.) • Modularity - A system can be divided into cooperating modules and executed by sending",
        "page": 41,
        "bbox": [
          75.02400207519531,
          72.67999267578125,
          554.816162109375,
          104.1319808959961
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "information among one another. • Convenience - Even a single user can work on multiple tasks by information sharing. Cooperating processes require some type of inter-process communication. This is allowed by two models:",
        "page": 41,
        "bbox": [
          57.0,
          105.32000732421875,
          507.2740173339844,
          182.25196838378906
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "1. Shared Memory systems 2. Message passing systems.",
        "page": 41,
        "bbox": [
          75.02400207519531,
          184.63999938964844,
          221.08999633789062,
          213.9319610595703
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Sl No Shared Memory Message passing",
        "page": 41,
        "bbox": [
          98.06400299072266,
          446.93798828125,
          494.8599853515625,
          460.34197998046875
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "1.",
        "page": 41,
        "bbox": [
          107.41999816894531,
          481.8580017089844,
          119.41999816894531,
          495.1419982910156
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "A region of memory is shared by communicating processes, into which the information is written and read",
        "page": 41,
        "bbox": [
          143.66000366210938,
          465.89801025390625,
          327.2120056152344,
          510.98199462890625
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Message exchange is done among the processes by using objects.",
        "page": 41,
        "bbox": [
          337.1499938964844,
          473.93798828125,
          503.28997802734375,
          503.0619812011719
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "2. Useful for sending large block of data Useful for sending small data.",
        "page": 41,
        "bbox": [
          107.41999816894531,
          516.657958984375,
          484.5400085449219,
          529.9419555664062
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "3. System call is used only to create shared memory",
        "page": 41,
        "bbox": [
          107.41999816894531,
          535.7379760742188,
          306.45196533203125,
          564.8619995117188
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "System call is used during every read and write operation.",
        "page": 41,
        "bbox": [
          337.1499938964844,
          535.7379760742188,
          495.6700134277344,
          564.8619995117188
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "4. Message is sent faster, as there are no system calls Message is communicated slowly.",
        "page": 41,
        "bbox": [
          107.41999816894531,
          568.137939453125,
          504.82000732421875,
          597.261962890625
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Shared Memory is faster once it is set up, because no system calls are required and access",
        "page": 41,
        "bbox": [
          75.02400207519531,
          630.7599487304688,
          556.4481201171875,
          645.4119262695312
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "occurs at normal memory speeds. Shared memory is generally preferable when large amounts of information must be shared quickly on the same computer. • Message Passing requires system calls for every message transfer, and is therefore slower, but",
        "page": 41,
        "bbox": [
          75.02400207519531,
          647.9679565429688,
          556.64599609375,
          693.8919677734375
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "it is simpler to set up and works well across multiple computers. Message passing is generally preferable when the amount and/or frequency of data transfers is small.",
        "page": 41,
        "bbox": [
          57.0,
          696.447998046875,
          556.9000244140625,
          741.4119873046875
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=712, height=482]",
        "page": 41,
        "bbox": [
          174.0,
          229.7999725341797,
          467.3999938964844,
          428.8499755859375
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 42,
        "bbox": [
          395.7099914550781,
          37.5,
          540.6099853515625,
          55.5
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "42 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 42,
        "bbox": [
          85.58399963378906,
          803.850341796875,
          494.83502197265625,
          819.3926391601562
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "Shared-Memory Systems",
        "page": 42,
        "bbox": [
          56.036094665527344,
          73.83196258544922,
          223.5255584716797,
          89.79196166992188
        ],
        "font": {
          "name": "SegoeScript-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• A region of shared-memory is created within the address space of a process, which needs to",
        "page": 42,
        "bbox": [
          75.02400207519531,
          111.67999267578125,
          556.5740966796875,
          126.33199310302734
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "communicate. Other process that needs to communicate uses this shared memory. • The form of data and position of creating shared memory area is decided by the process.",
        "page": 42,
        "bbox": [
          75.02400207519531,
          128.76795959472656,
          556.5960083007812,
          158.9720001220703
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Generally, a few messages must be passed back and forth between the cooperating processes first in order to set up and coordinate the shared memory access. • The process should take care that the two processes will not write the data to the shared",
        "page": 42,
        "bbox": [
          75.02400207519531,
          161.40797424316406,
          556.592041015625,
          207.4519805908203
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "memory at the same time. Producer-Consumer Example Using Shared Memory",
        "page": 42,
        "bbox": [
          57.0,
          209.88795471191406,
          332.7099914550781,
          270.8420104980469
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• This is a classic example, in which one process is producing data and another process is",
        "page": 42,
        "bbox": [
          75.02400207519531,
          272.989990234375,
          556.548095703125,
          287.6419982910156
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "consuming the data. • The data is passed via an intermediary buffer (shared memory). The producer puts the data to",
        "page": 42,
        "bbox": [
          75.02400207519531,
          290.0779724121094,
          556.5001220703125,
          320.2820129394531
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "the buffer and the consumer takes out the data from the buffer. A producer can produce one item while the consumer is consuming another item. The producer and consumer must be synchronized, so that the consumer does not try to consume an item that has not yet been produced. In this situation, the consumer must wait until an item is produced. • There are two types of buffers into which information can be put –",
        "page": 42,
        "bbox": [
          75.02400207519531,
          322.7179870605469,
          556.7499389648438,
          400.4419860839844
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Unbounded buffer • Bounded buffer",
        "page": 42,
        "bbox": [
          57.0,
          402.469970703125,
          233.92999267578125,
          449.6619873046875
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• With Unbounded buffer , there is no limit on the size of the buffer, and so on the data",
        "page": 42,
        "bbox": [
          75.02400207519531,
          451.80999755859375,
          511.5500183105469,
          466.4620056152344
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "produced by producer. But the consumer may have to wait for new items.",
        "page": 42,
        "bbox": [
          57.0,
          469.01800537109375,
          449.260009765625,
          498.1419982910156
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• With bounded-buffer – As the buffer size is fixed. The producer has to wait if the buffer is",
        "page": 42,
        "bbox": [
          75.02400207519531,
          500.28997802734375,
          537.8179931640625,
          514.9419555664062
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "full and the consumer has to wait if the buffer is empty. This example uses shared memory as a circular queue. The in and out are two pointers to the array. Note in the code below that only the producer changes \"in\", and only the consumer changes \"out\".",
        "page": 42,
        "bbox": [
          57.0,
          517.4979248046875,
          537.25,
          594.261962890625
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=2, height=2]",
        "page": 42,
        "bbox": [
          90.02400207519531,
          596.7099609375,
          108.50399780273438,
          610.0299682617188
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "First the following data is set up in the shared memory area:",
        "page": 42,
        "bbox": [
          99.26399993896484,
          596.6500244140625,
          398.5899963378906,
          610.1019897460938
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=318, height=226]",
        "page": 42,
        "bbox": [
          210.8000030517578,
          612.1489868164062,
          399.97998046875,
          746.5989990234375
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 43,
        "bbox": [
          395.7099914550781,
          37.5,
          540.6099853515625,
          55.5
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "43 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 43,
        "bbox": [
          85.58399963378906,
          806.370361328125,
          494.83502197265625,
          821.9126586914062
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "image",
        "content": "[Image: width=2, height=2]",
        "page": 43,
        "bbox": [
          90.02400207519531,
          73.94001007080078,
          108.50399780273438,
          87.260009765625
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "The producer process –",
        "page": 43,
        "bbox": [
          99.26399993896484,
          73.87998962402344,
          223.25,
          87.33199310302734
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Note that the buffer is full when [ (in+1) % BUFFER_SIZE == out]",
        "page": 43,
        "bbox": [
          57.0,
          89.88795471191406,
          436.75,
          119.1319808959961
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=2, height=2]",
        "page": 43,
        "bbox": [
          89.66400146484375,
          293.5699462890625,
          108.14399719238281,
          306.88995361328125
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "The consumer process –",
        "page": 43,
        "bbox": [
          98.90399932861328,
          293.510009765625,
          226.85000610351562,
          306.9620056152344
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Note that the buffer is empty when [ in == out]",
        "page": 43,
        "bbox": [
          56.63999938964844,
          309.5179748535156,
          338.95001220703125,
          338.6419982910156
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Message-Passing Systems",
        "page": 43,
        "bbox": [
          55.67609405517578,
          533.001953125,
          222.445556640625,
          548.9619750976562
        ],
        "font": {
          "name": "SegoeScript-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "A mechanism to allow process communication without sharing address space. It is used in distributed systems.",
        "page": 43,
        "bbox": [
          56.63999938964844,
          555.41796875,
          556.4279174804688,
          600.3819580078125
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Message passing systems uses system calls for \"send message\" and \"receive message\".",
        "page": 43,
        "bbox": [
          76.2239990234375,
          602.93798828125,
          513.4599609375,
          616.2219848632812
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• A communication link must be established between the cooperating processes before messages can be sent.",
        "page": 43,
        "bbox": [
          76.2239990234375,
          618.8079833984375,
          556.4880981445312,
          648.0519409179688
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• There are three methods of creating the link between the sender and the receiver-",
        "page": 43,
        "bbox": [
          76.2239990234375,
          650.6079711914062,
          485.1400146484375,
          663.8919677734375
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "o Direct or indirect communication (naming)",
        "page": 43,
        "bbox": [
          112.22000122070312,
          666.447998046875,
          340.6300048828125,
          679.7319946289062
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "o Synchronous or asynchronous communication (Synchronization)",
        "page": 43,
        "bbox": [
          112.22000122070312,
          682.2879638671875,
          445.05999755859375,
          695.5719604492188
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "o Automatic or explicit buffering.",
        "page": 43,
        "bbox": [
          56.63999938964844,
          698.2479858398438,
          286.6099853515625,
          790.8479614257812
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=649, height=327]",
        "page": 43,
        "bbox": [
          153.14999389648438,
          121.17999267578125,
          458.79998779296875,
          275.17999267578125
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=639, height=342]",
        "page": 43,
        "bbox": [
          150.0,
          340.72998046875,
          461.6499938964844,
          507.52996826171875
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 18CS43",
        "page": 44,
        "bbox": [
          395.3500061035156,
          37.5,
          540.3699951171875,
          55.5
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "heading",
        "content": "44 Deepak D, Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 44,
        "bbox": [
          85.2239990234375,
          799.2903442382812,
          494.59503173828125,
          814.8326416015625
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 14.039999961853027,
          "flags": 20,
          "color": 0
        },
        "level": 2
      },
      {
        "type": "paragraph",
        "content": "1. Naming Processes that want to communicate must have a way to refer to each other. They can use either direct or indirect communication. a) Direct communication the sender and receiver must explicitly know each other’s name. The syntax for send() and receive() functions are as follows-",
        "page": 44,
        "bbox": [
          56.63999938964844,
          74.04798889160156,
          556.7440185546875,
          182.61195373535156
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 12.0,
          "flags": 20,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• send ( P, message ) – send a message to process P • receive ( Q, message ) – receive a message from process Q Properties of communication link:",
        "page": 44,
        "bbox": [
          54.0,
          184.760009765625,
          367.989990234375,
          247.77198791503906
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• A link is established automatically between every pair of processes that wants to",
        "page": 44,
        "bbox": [
          72.02400207519531,
          249.95001220703125,
          542.8800659179688,
          264.6020202636719
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "communicate. The processes need to know only each other's identity to communicate. • A link is associated with exactly one pair of communicating processes • Between each pair, there exists exactly one link. Types of addressing in direct communication –",
        "page": 44,
        "bbox": [
          54.0,
          267.1579895019531,
          504.82000732421875,
          361.4419860839844
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Symmetric addressing – the above-described communication is symmetric communication.",
        "page": 44,
        "bbox": [
          72.02400207519531,
          363.5899963378906,
          543.0700073242188,
          378.24200439453125
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Here both the sender and the receiver processes have to name each other to communicate. • Asymmetric addressing – Here only the sender’s name is mentioned, but the receiving data",
        "page": 44,
        "bbox": [
          72.02400207519531,
          380.7980041503906,
          543.093994140625,
          410.8819885253906
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "can be from any system.",
        "page": 44,
        "bbox": [
          90.02400207519531,
          413.3179931640625,
          209.69000244140625,
          426.60198974609375
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "send (P, message) --- Send a message to process P receive (id, message). Receive a message from any process Disadvantages of direct communication – any changes in the identifier of a process, may have to change the identifier in the whole system (sender and receiver), where the messages are sent and received. b) Indirect communication uses shared mailboxes, or ports. A mailbox or port is used to send and receive messages. Mailbox is an object into which messages can be sent and received. It has a unique ID. Using this identifier messages are sent and received. Two processes can communicate only if they have a shared mailbox. The send and receive functions are –",
        "page": 44,
        "bbox": [
          54.0,
          429.2980041503906,
          543.196044921875,
          664.7319946289062
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 12.0,
          "flags": 20,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• send ( A, message ) – send a message to mailbox A • receive ( A, message ) – receive a message from mailbox A Properties of communication link:",
        "page": 44,
        "bbox": [
          54.0,
          666.8800048828125,
          373.0299987792969,
          729.8919677734375
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• A link is established between a pair of processes only if they have a shared mailbox",
        "page": 44,
        "bbox": [
          72.02400207519531,
          732.156005859375,
          496.8999938964844,
          746.8079833984375
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 17CS64",
        "page": 45,
        "bbox": [
          383.3500061035156,
          42.0,
          541.4920043945312,
          54.0
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "45 Deepak D , Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 45,
        "bbox": [
          54.0,
          801.719970703125,
          490.0119934082031,
          827.1599731445312
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• A link may be associated with more than two processes • Between each pair of communicating processes, there may be any number of links, each link",
        "page": 45,
        "bbox": [
          72.02400207519531,
          82.6400146484375,
          542.8560180664062,
          114.09200286865234
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "is associated with one mailbox. • A mail box can be owned by the operating system. It must take steps to –",
        "page": 45,
        "bbox": [
          72.02400207519531,
          116.52796936035156,
          444.4599914550781,
          146.61195373535156
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• create a new mailbox • send and receive messages from mailbox • delete mailboxes. 2. Synchronization The send and receive messages can be implemented as either blocking or non-blocking .",
        "page": 45,
        "bbox": [
          54.0,
          148.760009765625,
          483.2200012207031,
          260.2519836425781
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=2, height=2]",
        "page": 45,
        "bbox": [
          87.02400207519531,
          262.72998046875,
          105.74400329589844,
          276.04998779296875
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Blocking (synchronous) send - sending process is blocked (waits) until the message is",
        "page": 45,
        "bbox": [
          96.38400268554688,
          262.66998291015625,
          543.1720581054688,
          276.1219787597656
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 12.0,
          "flags": 20,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "received by receiving process or the mailbox.",
        "page": 45,
        "bbox": [
          105.0199966430664,
          278.6780090332031,
          325.75,
          291.9620056152344
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=2, height=2]",
        "page": 45,
        "bbox": [
          87.02400207519531,
          294.40997314453125,
          105.74400329589844,
          307.72998046875
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Non-blocking (asynchronous) send - sends the message and continues (does not wait)",
        "page": 45,
        "bbox": [
          54.0,
          294.3499755859375,
          527.8599853515625,
          323.7619934082031
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 12.0,
          "flags": 20,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=2, height=2]",
        "page": 45,
        "bbox": [
          87.02400207519531,
          326.2099609375,
          105.74400329589844,
          339.52996826171875
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Blocking (synchronous) receive - The receiving process is blocked until a message is",
        "page": 45,
        "bbox": [
          96.38400268554688,
          326.1499938964844,
          543.219970703125,
          339.60198974609375
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 12.0,
          "flags": 20,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "available",
        "page": 45,
        "bbox": [
          105.0199966430664,
          342.1579895019531,
          151.33999633789062,
          355.4419860839844
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=2, height=2]",
        "page": 45,
        "bbox": [
          87.02400207519531,
          357.8899841308594,
          105.74400329589844,
          371.2099914550781
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Non-blocking (asynchronous) receive - receives the message without block. The",
        "page": 45,
        "bbox": [
          96.38400268554688,
          357.8299865722656,
          543.10595703125,
          371.281982421875
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 12.0,
          "flags": 20,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "received message may be a valid message or null. 3. Buffering When messages are passed, a temporary queue is created. Such queue can be of three capacities:",
        "page": 45,
        "bbox": [
          54.0,
          373.9580078125,
          519.9400024414062,
          450.74200439453125
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=2, height=2]",
        "page": 45,
        "bbox": [
          87.02400207519531,
          453.1899719238281,
          105.74400329589844,
          466.5099792480469
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Zero capacity – The buffer size is zero (buffer does not exist). Messages are not stored in",
        "page": 45,
        "bbox": [
          96.38400268554688,
          453.1300048828125,
          543.0260009765625,
          466.5820007324219
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 12.0,
          "flags": 20,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "the queue. The senders must block until receivers accept the messages.",
        "page": 45,
        "bbox": [
          105.0199966430664,
          469.13800048828125,
          447.5799865722656,
          482.4219970703125
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=2, height=2]",
        "page": 45,
        "bbox": [
          87.02400207519531,
          484.8699645996094,
          105.74400329589844,
          498.1899719238281
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Bounded capacity - The queue is of fixed size(n). Senders must block if the queue is full.",
        "page": 45,
        "bbox": [
          96.38400268554688,
          484.80999755859375,
          542.9299926757812,
          498.2619934082031
        ],
        "font": {
          "name": "TimesNewRomanPS-BoldMT",
          "size": 12.0,
          "flags": 20,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "After sending ‘n’ bytes the sender is blocked.",
        "page": 45,
        "bbox": [
          105.0199966430664,
          500.93798828125,
          325.75,
          514.2219848632812
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "image",
        "content": "[Image: width=2, height=2]",
        "page": 45,
        "bbox": [
          87.02400207519531,
          516.6699829101562,
          105.74400329589844,
          529.989990234375
        ],
        "font": {
          "name": "image",
          "size": 0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Unbounded capacity - The queue is of infinite capacity. The sender never blocks.",
        "page": 45,
        "bbox": [
          54.0,
          516.6099853515625,
          512.97998046875,
          784.6079711914062
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Operating Systems 17CS64",
        "page": 46,
        "bbox": [
          383.3500061035156,
          42.0,
          541.4920043945312,
          54.0
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "46 Deepak D , Asst. Prof., Dept. of CS&E, Canara Engineering College, Mangaluru",
        "page": 46,
        "bbox": [
          54.0,
          801.719970703125,
          490.0119934082031,
          827.1599731445312
        ],
        "font": {
          "name": "Calibri-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Question Bank",
        "page": 46,
        "bbox": [
          53.036094665527344,
          82.83196258544922,
          158.93556213378906,
          98.79196166992188
        ],
        "font": {
          "name": "SegoeScript-Bold",
          "size": 12.0,
          "flags": 16,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "1. What is operating system? Explain multiprogramming and time-sharing system.",
        "page": 46,
        "bbox": [
          72.02400207519531,
          102.19999694824219,
          477.3399963378906,
          115.6520004272461
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "2. Explain dual mode operating in operating system with a neat block diagram.",
        "page": 46,
        "bbox": [
          72.02400207519531,
          122.84001159667969,
          459.82000732421875,
          136.29200744628906
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "3. What are system calls? Briefly print out its types.",
        "page": 46,
        "bbox": [
          72.02400207519531,
          143.59996032714844,
          330.07000732421875,
          157.0519561767578
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "4. What is Interprocess communication? Explain direct and indirect communication with",
        "page": 46,
        "bbox": [
          72.02400207519531,
          164.23997497558594,
          541.56201171875,
          177.6919708251953
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "respect to message passing system.",
        "page": 46,
        "bbox": [
          90.02400207519531,
          185.16798400878906,
          261.4100036621094,
          198.4519805908203
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "5. Analyze modular kernel approach with layered approach with a neat sketch.",
        "page": 46,
        "bbox": [
          72.02400207519531,
          205.63999938964844,
          457.8999938964844,
          219.0919952392578
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "6. List and explain the services provided by OS for the user and efficient operation of system.",
        "page": 46,
        "bbox": [
          72.02400207519531,
          226.40000915527344,
          530.260009765625,
          239.8520050048828
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "7. Illustrate with a neat sketch, the process states and process control block.",
        "page": 46,
        "bbox": [
          72.02400207519531,
          247.0399627685547,
          443.260009765625,
          260.4919738769531
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "8. Discuss the methods to implement message passing IPC in detail.",
        "page": 46,
        "bbox": [
          72.02400207519531,
          267.83001708984375,
          407.8299865722656,
          281.2820129394531
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "9. With a neat diagram, explain the concept of virtual machines.",
        "page": 46,
        "bbox": [
          72.02400207519531,
          288.469970703125,
          388.6300048828125,
          301.9219665527344
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "10. Define the following terms",
        "page": 46,
        "bbox": [
          72.02400207519531,
          309.22998046875,
          222.77000427246094,
          322.6819763183594
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Virtual Machine",
        "page": 46,
        "bbox": [
          108.0199966430664,
          329.6299743652344,
          208.00999450683594,
          344.281982421875
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• CPU scheduler",
        "page": 46,
        "bbox": [
          108.0199966430664,
          351.22998046875,
          201.41000366210938,
          365.8819885253906
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• System call",
        "page": 46,
        "bbox": [
          108.0199966430664,
          372.8299865722656,
          184.6999969482422,
          387.48199462890625
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "• Context switch",
        "page": 46,
        "bbox": [
          108.0199966430664,
          394.30999755859375,
          201.41000366210938,
          408.9620056152344
        ],
        "font": {
          "name": "SymbolMT",
          "size": 12.0,
          "flags": 0,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "11. What is Interprocess communication? Explain direct and indirect communication with",
        "page": 46,
        "bbox": [
          72.02400207519531,
          416.1499938964844,
          541.56201171875,
          429.60198974609375
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "respect to message passing system.",
        "page": 46,
        "bbox": [
          90.02400207519531,
          436.9779968261719,
          261.4100036621094,
          450.2619934082031
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "12. Describe a mechanism for enforcing memory protection in order to prevent a program from",
        "page": 46,
        "bbox": [
          72.02400207519531,
          457.57000732421875,
          541.2359008789062,
          471.0220031738281
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "modifying the memory associated with other programs.",
        "page": 46,
        "bbox": [
          90.02400207519531,
          478.37799072265625,
          359.3500061035156,
          491.6619873046875
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "13. What are the tradeoffs inherent in handheld computers?",
        "page": 46,
        "bbox": [
          72.02400207519531,
          498.9700012207031,
          359.95001220703125,
          512.4219970703125
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "14. Distinguish between the client-server and peer-to-peer models of distributed systems.",
        "page": 46,
        "bbox": [
          72.02400207519531,
          519.6099853515625,
          503.1400146484375,
          533.0619506835938
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "15. Some computer systems do not provide a privileged mode of operation in hardware. Is it",
        "page": 46,
        "bbox": [
          72.02400207519531,
          540.3699951171875,
          541.18798828125,
          553.8219604492188
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "possible to construct a secure operating system for these computer systems? Give arguments",
        "page": 46,
        "bbox": [
          90.02400207519531,
          561.177978515625,
          541.2860717773438,
          574.4619750976562
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "both that it is and that it is not possible.",
        "page": 46,
        "bbox": [
          90.02400207519531,
          581.93798828125,
          281.80999755859375,
          595.2219848632812
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "16. What are the main differences between operating systems for mainframe computers and",
        "page": 46,
        "bbox": [
          72.02400207519531,
          602.4100341796875,
          541.2120971679688,
          615.8619995117188
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "personal computers?",
        "page": 46,
        "bbox": [
          90.02400207519531,
          623.3679809570312,
          192.0500030517578,
          636.6519775390625
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "17. Identify several advantages and several disadvantages of open-source operating systems.",
        "page": 46,
        "bbox": [
          72.02400207519531,
          643.8399658203125,
          541.426025390625,
          657.2919311523438
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "Include the types of people who would find each aspect to be an advantage or a",
        "page": 46,
        "bbox": [
          90.02400207519531,
          664.7679443359375,
          541.260009765625,
          678.0519409179688
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "disadvantage.",
        "page": 46,
        "bbox": [
          90.02400207519531,
          685.407958984375,
          158.66000366210938,
          698.6919555664062
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "18. How do clustered systems differ from multiprocessor systems? What is required for two",
        "page": 46,
        "bbox": [
          72.02400207519531,
          706.0,
          541.1400756835938,
          719.4519653320312
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "machines belonging to a cluster to cooperate to provide a highly available service?",
        "page": 46,
        "bbox": [
          90.02400207519531,
          726.8079833984375,
          489.70001220703125,
          740.0919799804688
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "19. What is the main difficulty that a programmer must overcome in writing an operating system",
        "page": 46,
        "bbox": [
          72.02400207519531,
          747.39599609375,
          541.1881103515625,
          760.8479614257812
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      },
      {
        "type": "paragraph",
        "content": "for a real-time environment?",
        "page": 46,
        "bbox": [
          90.02400207519531,
          763.4039916992188,
          230.69000244140625,
          776.68798828125
        ],
        "font": {
          "name": "TimesNewRomanPSMT",
          "size": 12.0,
          "flags": 4,
          "color": 0
        }
      }
    ],
    "outline": []
  },
  "processing_info": {
    "processing_time": 0.287,
    "timestamp": "2025-07-28T20:13:33.296925",
    "library_version": "1.26.3",
    "total_sections": 714
  }
}